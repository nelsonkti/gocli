// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/demo/helloworld.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SayWhat_SayHello_FullMethodName  = "/SayWhat/SayHello"
	SayWhat_SayHello2_FullMethodName = "/SayWhat/SayHello2"
)

// SayWhatClient is the client API for SayWhat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayWhatClient interface {
	SayHello(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error)
	SayHello2(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error)
}

type sayWhatClient struct {
	cc grpc.ClientConnInterface
}

func NewSayWhatClient(cc grpc.ClientConnInterface) SayWhatClient {
	return &sayWhatClient{cc}
}

func (c *sayWhatClient) SayHello(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error) {
	out := new(SayResponse)
	err := c.cc.Invoke(ctx, SayWhat_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sayWhatClient) SayHello2(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error) {
	out := new(SayResponse)
	err := c.cc.Invoke(ctx, SayWhat_SayHello2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayWhatServer is the server API for SayWhat service.
// All implementations must embed UnimplementedSayWhatServer
// for forward compatibility
type SayWhatServer interface {
	SayHello(context.Context, *SayRequest) (*SayResponse, error)
	SayHello2(context.Context, *SayRequest) (*SayResponse, error)
	mustEmbedUnimplementedSayWhatServer()
}

// UnimplementedSayWhatServer must be embedded to have forward compatible implementations.
type UnimplementedSayWhatServer struct {
}

func (UnimplementedSayWhatServer) SayHello(context.Context, *SayRequest) (*SayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSayWhatServer) SayHello2(context.Context, *SayRequest) (*SayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello2 not implemented")
}
func (UnimplementedSayWhatServer) mustEmbedUnimplementedSayWhatServer() {}

// UnsafeSayWhatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayWhatServer will
// result in compilation errors.
type UnsafeSayWhatServer interface {
	mustEmbedUnimplementedSayWhatServer()
}

func RegisterSayWhatServer(s grpc.ServiceRegistrar, srv SayWhatServer) {
	s.RegisterService(&SayWhat_ServiceDesc, srv)
}

func _SayWhat_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayWhatServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SayWhat_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayWhatServer).SayHello(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SayWhat_SayHello2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayWhatServer).SayHello2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SayWhat_SayHello2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayWhatServer).SayHello2(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SayWhat_ServiceDesc is the grpc.ServiceDesc for SayWhat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayWhat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SayWhat",
	HandlerType: (*SayWhatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SayWhat_SayHello_Handler,
		},
		{
			MethodName: "SayHello2",
			Handler:    _SayWhat_SayHello2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/demo/helloworld.proto",
}

const (
	SayWhatK_SayHello_FullMethodName  = "/SayWhatK/SayHello"
	SayWhatK_SayHello2_FullMethodName = "/SayWhatK/SayHello2"
)

// SayWhatKClient is the client API for SayWhatK service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayWhatKClient interface {
	SayHello(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error)
	SayHello2(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error)
}

type sayWhatKClient struct {
	cc grpc.ClientConnInterface
}

func NewSayWhatKClient(cc grpc.ClientConnInterface) SayWhatKClient {
	return &sayWhatKClient{cc}
}

func (c *sayWhatKClient) SayHello(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error) {
	out := new(SayResponse)
	err := c.cc.Invoke(ctx, SayWhatK_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sayWhatKClient) SayHello2(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error) {
	out := new(SayResponse)
	err := c.cc.Invoke(ctx, SayWhatK_SayHello2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayWhatKServer is the server API for SayWhatK service.
// All implementations must embed UnimplementedSayWhatKServer
// for forward compatibility
type SayWhatKServer interface {
	SayHello(context.Context, *SayRequest) (*SayResponse, error)
	SayHello2(context.Context, *SayRequest) (*SayResponse, error)
	mustEmbedUnimplementedSayWhatKServer()
}

// UnimplementedSayWhatKServer must be embedded to have forward compatible implementations.
type UnimplementedSayWhatKServer struct {
}

func (UnimplementedSayWhatKServer) SayHello(context.Context, *SayRequest) (*SayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSayWhatKServer) SayHello2(context.Context, *SayRequest) (*SayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello2 not implemented")
}
func (UnimplementedSayWhatKServer) mustEmbedUnimplementedSayWhatKServer() {}

// UnsafeSayWhatKServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayWhatKServer will
// result in compilation errors.
type UnsafeSayWhatKServer interface {
	mustEmbedUnimplementedSayWhatKServer()
}

func RegisterSayWhatKServer(s grpc.ServiceRegistrar, srv SayWhatKServer) {
	s.RegisterService(&SayWhatK_ServiceDesc, srv)
}

func _SayWhatK_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayWhatKServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SayWhatK_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayWhatKServer).SayHello(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SayWhatK_SayHello2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayWhatKServer).SayHello2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SayWhatK_SayHello2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayWhatKServer).SayHello2(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SayWhatK_ServiceDesc is the grpc.ServiceDesc for SayWhatK service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayWhatK_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SayWhatK",
	HandlerType: (*SayWhatKServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SayWhatK_SayHello_Handler,
		},
		{
			MethodName: "SayHello2",
			Handler:    _SayWhatK_SayHello2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/demo/helloworld.proto",
}
