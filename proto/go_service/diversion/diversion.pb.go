// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: proto/go_service/diversion/diversion.proto

package diversion

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message Record Start
// --------------------------------实验配置白名单表--------------------------------
type AbtestWhiteUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                     //自增ID
	ExperimentId int64  `protobuf:"varint,2,opt,name=experimentId,proto3" json:"experimentId,omitempty"` //实验配置主表主键ID
	GroupId      int64  `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`           //实验配置分组表主键ID
	CreatedAt    int64  `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`       //创建时间
	UpdatedAt    int64  `protobuf:"varint,5,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`       //更新时间
	DistinctId   string `protobuf:"bytes,6,opt,name=distinctId,proto3" json:"distinctId,omitempty"`      //白名单 用户ID/支付宝ID/匿名ID
}

func (x *AbtestWhiteUser) Reset() {
	*x = AbtestWhiteUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestWhiteUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestWhiteUser) ProtoMessage() {}

func (x *AbtestWhiteUser) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestWhiteUser.ProtoReflect.Descriptor instead.
func (*AbtestWhiteUser) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{0}
}

func (x *AbtestWhiteUser) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbtestWhiteUser) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *AbtestWhiteUser) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AbtestWhiteUser) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AbtestWhiteUser) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AbtestWhiteUser) GetDistinctId() string {
	if x != nil {
		return x.DistinctId
	}
	return ""
}

type AbtestWhiteUserFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo       int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`             // pageNo
	PageSize     int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`         // pageSize
	Id           uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                     //自增ID
	ExperimentId int64  `protobuf:"varint,4,opt,name=experimentId,proto3" json:"experimentId,omitempty"` //实验配置主表主键ID
	GroupId      int64  `protobuf:"varint,5,opt,name=groupId,proto3" json:"groupId,omitempty"`           //实验配置分组表主键ID
	CreatedAt    int64  `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`       //创建时间
	UpdatedAt    int64  `protobuf:"varint,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`       //更新时间
	DistinctId   string `protobuf:"bytes,8,opt,name=distinctId,proto3" json:"distinctId,omitempty"`      //白名单 用户ID/支付宝ID/匿名ID
}

func (x *AbtestWhiteUserFilter) Reset() {
	*x = AbtestWhiteUserFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestWhiteUserFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestWhiteUserFilter) ProtoMessage() {}

func (x *AbtestWhiteUserFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestWhiteUserFilter.ProtoReflect.Descriptor instead.
func (*AbtestWhiteUserFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{1}
}

func (x *AbtestWhiteUserFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AbtestWhiteUserFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AbtestWhiteUserFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbtestWhiteUserFilter) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *AbtestWhiteUserFilter) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AbtestWhiteUserFilter) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AbtestWhiteUserFilter) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AbtestWhiteUserFilter) GetDistinctId() string {
	if x != nil {
		return x.DistinctId
	}
	return ""
}

type AbtestWhiteUserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbtestWhiteUser []*AbtestWhiteUser `protobuf:"bytes,1,rep,name=abtestWhiteUser,proto3" json:"abtestWhiteUser,omitempty"` // abtestWhiteUserList
	TotalPage       int64              `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`            //
	TotalCount      int64              `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`          //
	CurPage         int64              `protobuf:"varint,4,opt,name=curPage,proto3" json:"curPage,omitempty"`                //
}

func (x *AbtestWhiteUserList) Reset() {
	*x = AbtestWhiteUserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestWhiteUserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestWhiteUserList) ProtoMessage() {}

func (x *AbtestWhiteUserList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestWhiteUserList.ProtoReflect.Descriptor instead.
func (*AbtestWhiteUserList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{2}
}

func (x *AbtestWhiteUserList) GetAbtestWhiteUser() []*AbtestWhiteUser {
	if x != nil {
		return x.AbtestWhiteUser
	}
	return nil
}

func (x *AbtestWhiteUserList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AbtestWhiteUserList) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *AbtestWhiteUserList) GetCurPage() int64 {
	if x != nil {
		return x.CurPage
	}
	return 0
}

// --------------------------------实验配置分组表--------------------------------
type AbtestExperimentGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                     //自增ID
	ExperimentId int64  `protobuf:"varint,2,opt,name=experimentId,proto3" json:"experimentId,omitempty"` //实验配置主表主键ID
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                  //分组名称
	Type         int64  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`                 //分组类型：0:对照组 1:实验组
	ParamId      string `protobuf:"bytes,5,opt,name=paramId,proto3" json:"paramId,omitempty"`            //参数ID
	ParamType    int64  `protobuf:"varint,6,opt,name=paramType,proto3" json:"paramType,omitempty"`       //参数类型：1：number 2：string 3：boolean  4：json
	ParamVal     string `protobuf:"bytes,7,opt,name=paramVal,proto3" json:"paramVal,omitempty"`          //参数值
	FlowPercent  int64  `protobuf:"varint,8,opt,name=flowPercent,proto3" json:"flowPercent,omitempty"`   //流量分配百分比 如: 90
}

func (x *AbtestExperimentGroup) Reset() {
	*x = AbtestExperimentGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestExperimentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestExperimentGroup) ProtoMessage() {}

func (x *AbtestExperimentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestExperimentGroup.ProtoReflect.Descriptor instead.
func (*AbtestExperimentGroup) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{3}
}

func (x *AbtestExperimentGroup) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbtestExperimentGroup) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *AbtestExperimentGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbtestExperimentGroup) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AbtestExperimentGroup) GetParamId() string {
	if x != nil {
		return x.ParamId
	}
	return ""
}

func (x *AbtestExperimentGroup) GetParamType() int64 {
	if x != nil {
		return x.ParamType
	}
	return 0
}

func (x *AbtestExperimentGroup) GetParamVal() string {
	if x != nil {
		return x.ParamVal
	}
	return ""
}

func (x *AbtestExperimentGroup) GetFlowPercent() int64 {
	if x != nil {
		return x.FlowPercent
	}
	return 0
}

type AbtestExperimentGroupFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo       int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`             // pageNo
	PageSize     int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`         // pageSize
	Id           uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                     //自增ID
	ExperimentId int64  `protobuf:"varint,4,opt,name=experimentId,proto3" json:"experimentId,omitempty"` //实验配置主表主键ID
	Name         string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                  //分组名称
	Type         int64  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`                 //分组类型：0:对照组 1:实验组
	ParamId      string `protobuf:"bytes,7,opt,name=paramId,proto3" json:"paramId,omitempty"`            //参数ID
	ParamType    int64  `protobuf:"varint,8,opt,name=paramType,proto3" json:"paramType,omitempty"`       //参数类型：1：number 2：string 3：boolean  4：json
	ParamVal     string `protobuf:"bytes,9,opt,name=paramVal,proto3" json:"paramVal,omitempty"`          //参数值
	FlowPercent  int64  `protobuf:"varint,10,opt,name=flowPercent,proto3" json:"flowPercent,omitempty"`  //流量分配百分比 如: 90
}

func (x *AbtestExperimentGroupFilter) Reset() {
	*x = AbtestExperimentGroupFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestExperimentGroupFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestExperimentGroupFilter) ProtoMessage() {}

func (x *AbtestExperimentGroupFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestExperimentGroupFilter.ProtoReflect.Descriptor instead.
func (*AbtestExperimentGroupFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{4}
}

func (x *AbtestExperimentGroupFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AbtestExperimentGroupFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AbtestExperimentGroupFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbtestExperimentGroupFilter) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *AbtestExperimentGroupFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbtestExperimentGroupFilter) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AbtestExperimentGroupFilter) GetParamId() string {
	if x != nil {
		return x.ParamId
	}
	return ""
}

func (x *AbtestExperimentGroupFilter) GetParamType() int64 {
	if x != nil {
		return x.ParamType
	}
	return 0
}

func (x *AbtestExperimentGroupFilter) GetParamVal() string {
	if x != nil {
		return x.ParamVal
	}
	return ""
}

func (x *AbtestExperimentGroupFilter) GetFlowPercent() int64 {
	if x != nil {
		return x.FlowPercent
	}
	return 0
}

type AbtestExperimentGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbtestExperimentGroup []*AbtestExperimentGroup `protobuf:"bytes,1,rep,name=abtestExperimentGroup,proto3" json:"abtestExperimentGroup,omitempty"` // abtestExperimentGroupList
	TotalPage             int64                    `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                        //
	TotalCount            int64                    `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`                      //
	CurPage               int64                    `protobuf:"varint,4,opt,name=curPage,proto3" json:"curPage,omitempty"`                            //
}

func (x *AbtestExperimentGroupList) Reset() {
	*x = AbtestExperimentGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestExperimentGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestExperimentGroupList) ProtoMessage() {}

func (x *AbtestExperimentGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestExperimentGroupList.ProtoReflect.Descriptor instead.
func (*AbtestExperimentGroupList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{5}
}

func (x *AbtestExperimentGroupList) GetAbtestExperimentGroup() []*AbtestExperimentGroup {
	if x != nil {
		return x.AbtestExperimentGroup
	}
	return nil
}

func (x *AbtestExperimentGroupList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AbtestExperimentGroupList) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *AbtestExperimentGroupList) GetCurPage() int64 {
	if x != nil {
		return x.CurPage
	}
	return 0
}

// --------------------------------实验配置主表--------------------------------
type AbtestExperiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id               uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                            //自增ID
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         //实验名称
	Terminal         string `protobuf:"bytes,3,opt,name=terminal,proto3" json:"terminal,omitempty"`                 //渠道端口 如：alipay.indi
	ExperimentType   int64  `protobuf:"varint,4,opt,name=experimentType,proto3" json:"experimentType,omitempty"`    //实验模式类型：1：AB 2：AA
	UserDimType      int64  `protobuf:"varint,5,opt,name=userDimType,proto3" json:"userDimType,omitempty"`          //用户维度：1：USERID，2：ALIPAYID
	ExperimentUniqId string `protobuf:"bytes,6,opt,name=experimentUniqId,proto3" json:"experimentUniqId,omitempty"` //实验ID唯一标识
	UserGroupId      int64  `protobuf:"varint,7,opt,name=userGroupId,proto3" json:"userGroupId,omitempty"`          //用户群ID：analyze_ab_user_group_conf表主键ID
	StartVersion     string `protobuf:"bytes,8,opt,name=startVersion,proto3" json:"startVersion,omitempty"`         //开始版本1.0.0
	EndVersion       string `protobuf:"bytes,9,opt,name=endVersion,proto3" json:"endVersion,omitempty"`             //结束版本2.0.0
	StartTime        int64  `protobuf:"varint,10,opt,name=startTime,proto3" json:"startTime,omitempty"`             //生效时间
	EndTime          int64  `protobuf:"varint,11,opt,name=endTime,proto3" json:"endTime,omitempty"`                 //结束时间
	CreatedBy        int64  `protobuf:"varint,12,opt,name=createdBy,proto3" json:"createdBy,omitempty"`             //创建人ID
	Status           int64  `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`                   //运行状态 0:审核中 1：未开始  2：运行中 3：已结束
	FlowPercent      int64  `protobuf:"varint,14,opt,name=flowPercent,proto3" json:"flowPercent,omitempty"`         //流量分配百分比 如: 90
	CreatedAt        int64  `protobuf:"varint,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`             //创建时间
	UpdatedAt        int64  `protobuf:"varint,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`             //更新时间
	UserNumber       int64  `protobuf:"varint,17,opt,name=userNumber,proto3" json:"userNumber,omitempty"`           //实验参与总人数
}

func (x *AbtestExperiment) Reset() {
	*x = AbtestExperiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestExperiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestExperiment) ProtoMessage() {}

func (x *AbtestExperiment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestExperiment.ProtoReflect.Descriptor instead.
func (*AbtestExperiment) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{6}
}

func (x *AbtestExperiment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbtestExperiment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbtestExperiment) GetTerminal() string {
	if x != nil {
		return x.Terminal
	}
	return ""
}

func (x *AbtestExperiment) GetExperimentType() int64 {
	if x != nil {
		return x.ExperimentType
	}
	return 0
}

func (x *AbtestExperiment) GetUserDimType() int64 {
	if x != nil {
		return x.UserDimType
	}
	return 0
}

func (x *AbtestExperiment) GetExperimentUniqId() string {
	if x != nil {
		return x.ExperimentUniqId
	}
	return ""
}

func (x *AbtestExperiment) GetUserGroupId() int64 {
	if x != nil {
		return x.UserGroupId
	}
	return 0
}

func (x *AbtestExperiment) GetStartVersion() string {
	if x != nil {
		return x.StartVersion
	}
	return ""
}

func (x *AbtestExperiment) GetEndVersion() string {
	if x != nil {
		return x.EndVersion
	}
	return ""
}

func (x *AbtestExperiment) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AbtestExperiment) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AbtestExperiment) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *AbtestExperiment) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AbtestExperiment) GetFlowPercent() int64 {
	if x != nil {
		return x.FlowPercent
	}
	return 0
}

func (x *AbtestExperiment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AbtestExperiment) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AbtestExperiment) GetUserNumber() int64 {
	if x != nil {
		return x.UserNumber
	}
	return 0
}

type AbtestExperimentFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo           int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`                    // pageNo
	PageSize         int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                // pageSize
	Id               uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                            //自增ID
	Name             string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                         //实验名称
	Terminal         string `protobuf:"bytes,5,opt,name=terminal,proto3" json:"terminal,omitempty"`                 //渠道端口 如：alipay.indi
	ExperimentType   int64  `protobuf:"varint,6,opt,name=experimentType,proto3" json:"experimentType,omitempty"`    //实验模式类型：1：AB 2：AA
	UserDimType      int64  `protobuf:"varint,7,opt,name=userDimType,proto3" json:"userDimType,omitempty"`          //用户维度：1：USERID，2：ALIPAYID
	ExperimentUniqId string `protobuf:"bytes,8,opt,name=experimentUniqId,proto3" json:"experimentUniqId,omitempty"` //实验ID唯一标识
	UserGroupId      int64  `protobuf:"varint,9,opt,name=userGroupId,proto3" json:"userGroupId,omitempty"`          //用户群ID：analyze_ab_user_group_conf表主键ID
	StartVersion     string `protobuf:"bytes,10,opt,name=startVersion,proto3" json:"startVersion,omitempty"`        //开始版本1.0.0
	EndVersion       string `protobuf:"bytes,11,opt,name=endVersion,proto3" json:"endVersion,omitempty"`            //结束版本2.0.0
	StartTime        int64  `protobuf:"varint,12,opt,name=startTime,proto3" json:"startTime,omitempty"`             //生效时间
	EndTime          int64  `protobuf:"varint,13,opt,name=endTime,proto3" json:"endTime,omitempty"`                 //结束时间
	CreatedBy        int64  `protobuf:"varint,14,opt,name=createdBy,proto3" json:"createdBy,omitempty"`             //创建人ID
	Status           int64  `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`                   //运行状态 0:审核中 1：未开始  2：运行中 3：已结束
	FlowPercent      int64  `protobuf:"varint,16,opt,name=flowPercent,proto3" json:"flowPercent,omitempty"`         //流量分配百分比 如: 90
	CreatedAt        int64  `protobuf:"varint,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`             //创建时间
	UpdatedAt        int64  `protobuf:"varint,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`             //更新时间
	UserNumber       int64  `protobuf:"varint,19,opt,name=userNumber,proto3" json:"userNumber,omitempty"`           //实验参与总人数
}

func (x *AbtestExperimentFilter) Reset() {
	*x = AbtestExperimentFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestExperimentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestExperimentFilter) ProtoMessage() {}

func (x *AbtestExperimentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestExperimentFilter.ProtoReflect.Descriptor instead.
func (*AbtestExperimentFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{7}
}

func (x *AbtestExperimentFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AbtestExperimentFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AbtestExperimentFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbtestExperimentFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbtestExperimentFilter) GetTerminal() string {
	if x != nil {
		return x.Terminal
	}
	return ""
}

func (x *AbtestExperimentFilter) GetExperimentType() int64 {
	if x != nil {
		return x.ExperimentType
	}
	return 0
}

func (x *AbtestExperimentFilter) GetUserDimType() int64 {
	if x != nil {
		return x.UserDimType
	}
	return 0
}

func (x *AbtestExperimentFilter) GetExperimentUniqId() string {
	if x != nil {
		return x.ExperimentUniqId
	}
	return ""
}

func (x *AbtestExperimentFilter) GetUserGroupId() int64 {
	if x != nil {
		return x.UserGroupId
	}
	return 0
}

func (x *AbtestExperimentFilter) GetStartVersion() string {
	if x != nil {
		return x.StartVersion
	}
	return ""
}

func (x *AbtestExperimentFilter) GetEndVersion() string {
	if x != nil {
		return x.EndVersion
	}
	return ""
}

func (x *AbtestExperimentFilter) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AbtestExperimentFilter) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AbtestExperimentFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *AbtestExperimentFilter) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AbtestExperimentFilter) GetFlowPercent() int64 {
	if x != nil {
		return x.FlowPercent
	}
	return 0
}

func (x *AbtestExperimentFilter) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AbtestExperimentFilter) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AbtestExperimentFilter) GetUserNumber() int64 {
	if x != nil {
		return x.UserNumber
	}
	return 0
}

type AbtestExperimentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbtestExperiment []*AbtestExperiment `protobuf:"bytes,1,rep,name=abtestExperiment,proto3" json:"abtestExperiment,omitempty"` // abtestExperimentList
	TotalPage        int64               `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`              //
	TotalCount       int64               `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`            //
	CurPage          int64               `protobuf:"varint,4,opt,name=curPage,proto3" json:"curPage,omitempty"`                  //
}

func (x *AbtestExperimentList) Reset() {
	*x = AbtestExperimentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestExperimentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestExperimentList) ProtoMessage() {}

func (x *AbtestExperimentList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestExperimentList.ProtoReflect.Descriptor instead.
func (*AbtestExperimentList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{8}
}

func (x *AbtestExperimentList) GetAbtestExperiment() []*AbtestExperiment {
	if x != nil {
		return x.AbtestExperiment
	}
	return nil
}

func (x *AbtestExperimentList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AbtestExperimentList) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *AbtestExperimentList) GetCurPage() int64 {
	if x != nil {
		return x.CurPage
	}
	return 0
}

// --------------------------------globalSecret--------------------------------
type GlobalSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                  //主键
	ParentId    int64  `protobuf:"varint,2,opt,name=parentId,proto3" json:"parentId,omitempty"`      //父级id
	SecretKey   string `protobuf:"bytes,3,opt,name=secretKey,proto3" json:"secretKey,omitempty"`     //密钥名称
	SecretValue string `protobuf:"bytes,4,opt,name=secretValue,proto3" json:"secretValue,omitempty"` //密钥内容
	SecretDesc  string `protobuf:"bytes,5,opt,name=secretDesc,proto3" json:"secretDesc,omitempty"`   //密钥描述
	CreatedBy   int64  `protobuf:"varint,6,opt,name=createdBy,proto3" json:"createdBy,omitempty"`    //创建人id (0代表系统初始化创建)
	UpdatedBy   int64  `protobuf:"varint,7,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`    //修改人id (0代表系统初始化创建)
	CreatedAt   int64  `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`    //创建时间
	UpdatedAt   int64  `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`    //最后修改时间
	IsDeleted   int64  `protobuf:"varint,10,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`   //是否删除(0/未删除 1/删除)
	DeletedAt   int64  `protobuf:"varint,11,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`   //删除时间
	DeletedBy   int64  `protobuf:"varint,12,opt,name=deletedBy,proto3" json:"deletedBy,omitempty"`   //删除人id
}

func (x *GlobalSecret) Reset() {
	*x = GlobalSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSecret) ProtoMessage() {}

func (x *GlobalSecret) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalSecret.ProtoReflect.Descriptor instead.
func (*GlobalSecret) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{9}
}

func (x *GlobalSecret) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GlobalSecret) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GlobalSecret) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *GlobalSecret) GetSecretValue() string {
	if x != nil {
		return x.SecretValue
	}
	return ""
}

func (x *GlobalSecret) GetSecretDesc() string {
	if x != nil {
		return x.SecretDesc
	}
	return ""
}

func (x *GlobalSecret) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *GlobalSecret) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *GlobalSecret) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GlobalSecret) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *GlobalSecret) GetIsDeleted() int64 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

func (x *GlobalSecret) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *GlobalSecret) GetDeletedBy() int64 {
	if x != nil {
		return x.DeletedBy
	}
	return 0
}

type GlobalSecretFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo      int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`          // pageNo
	PageSize    int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`      // pageSize
	Id          uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                  //主键
	ParentId    int64  `protobuf:"varint,4,opt,name=parentId,proto3" json:"parentId,omitempty"`      //父级id
	SecretKey   string `protobuf:"bytes,5,opt,name=secretKey,proto3" json:"secretKey,omitempty"`     //密钥名称
	SecretValue string `protobuf:"bytes,6,opt,name=secretValue,proto3" json:"secretValue,omitempty"` //密钥内容
	SecretDesc  string `protobuf:"bytes,7,opt,name=secretDesc,proto3" json:"secretDesc,omitempty"`   //密钥描述
	CreatedBy   int64  `protobuf:"varint,8,opt,name=createdBy,proto3" json:"createdBy,omitempty"`    //创建人id (0代表系统初始化创建)
	UpdatedBy   int64  `protobuf:"varint,9,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`    //修改人id (0代表系统初始化创建)
	CreatedAt   int64  `protobuf:"varint,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`   //创建时间
	UpdatedAt   int64  `protobuf:"varint,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`   //最后修改时间
	IsDeleted   int64  `protobuf:"varint,12,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`   //是否删除(0/未删除 1/删除)
	DeletedAt   int64  `protobuf:"varint,13,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`   //删除时间
	DeletedBy   int64  `protobuf:"varint,14,opt,name=deletedBy,proto3" json:"deletedBy,omitempty"`   //删除人id
}

func (x *GlobalSecretFilter) Reset() {
	*x = GlobalSecretFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalSecretFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSecretFilter) ProtoMessage() {}

func (x *GlobalSecretFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalSecretFilter.ProtoReflect.Descriptor instead.
func (*GlobalSecretFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{10}
}

func (x *GlobalSecretFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *GlobalSecretFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GlobalSecretFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GlobalSecretFilter) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GlobalSecretFilter) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *GlobalSecretFilter) GetSecretValue() string {
	if x != nil {
		return x.SecretValue
	}
	return ""
}

func (x *GlobalSecretFilter) GetSecretDesc() string {
	if x != nil {
		return x.SecretDesc
	}
	return ""
}

func (x *GlobalSecretFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *GlobalSecretFilter) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *GlobalSecretFilter) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GlobalSecretFilter) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *GlobalSecretFilter) GetIsDeleted() int64 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

func (x *GlobalSecretFilter) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *GlobalSecretFilter) GetDeletedBy() int64 {
	if x != nil {
		return x.DeletedBy
	}
	return 0
}

type GlobalSecretList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalSecret []*GlobalSecret `protobuf:"bytes,1,rep,name=globalSecret,proto3" json:"globalSecret,omitempty"` // globalSecretList
	TotalPage    int64           `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`      //
	TotalCount   int64           `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`    //
	CurPage      int64           `protobuf:"varint,4,opt,name=curPage,proto3" json:"curPage,omitempty"`          //
}

func (x *GlobalSecretList) Reset() {
	*x = GlobalSecretList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalSecretList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSecretList) ProtoMessage() {}

func (x *GlobalSecretList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalSecretList.ProtoReflect.Descriptor instead.
func (*GlobalSecretList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{11}
}

func (x *GlobalSecretList) GetGlobalSecret() []*GlobalSecret {
	if x != nil {
		return x.GlobalSecret
	}
	return nil
}

func (x *GlobalSecretList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GlobalSecretList) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GlobalSecretList) GetCurPage() int64 {
	if x != nil {
		return x.CurPage
	}
	return 0
}

// --------------------------------abtestUserGroup--------------------------------
type AbtestUserGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                   // id
	EntityId    string `protobuf:"bytes,2,opt,name=entityId,proto3" json:"entityId,omitempty"`        // entityId
	EntityType  int64  `protobuf:"varint,3,opt,name=entityType,proto3" json:"entityType,omitempty"`   // entityType
	UserGroupId int64  `protobuf:"varint,4,opt,name=userGroupId,proto3" json:"userGroupId,omitempty"` // userGroupId
	CreatedAt   int64  `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`     // createdAt
	UpdatedAt   int64  `protobuf:"varint,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`     // updatedAt
}

func (x *AbtestUserGroup) Reset() {
	*x = AbtestUserGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestUserGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestUserGroup) ProtoMessage() {}

func (x *AbtestUserGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestUserGroup.ProtoReflect.Descriptor instead.
func (*AbtestUserGroup) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{12}
}

func (x *AbtestUserGroup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbtestUserGroup) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *AbtestUserGroup) GetEntityType() int64 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *AbtestUserGroup) GetUserGroupId() int64 {
	if x != nil {
		return x.UserGroupId
	}
	return 0
}

func (x *AbtestUserGroup) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AbtestUserGroup) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AbtestUserGroupFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo      int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`           // pageNo
	PageSize    int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`       // pageSize
	Id          int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                   // id
	EntityId    string `protobuf:"bytes,4,opt,name=entityId,proto3" json:"entityId,omitempty"`        // entityId
	EntityType  int64  `protobuf:"varint,5,opt,name=entityType,proto3" json:"entityType,omitempty"`   // entityType
	UserGroupId int64  `protobuf:"varint,6,opt,name=userGroupId,proto3" json:"userGroupId,omitempty"` // userGroupId
	CreatedAt   int64  `protobuf:"varint,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`     // createdAt
	UpdatedAt   int64  `protobuf:"varint,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`     // updatedAt
}

func (x *AbtestUserGroupFilter) Reset() {
	*x = AbtestUserGroupFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestUserGroupFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestUserGroupFilter) ProtoMessage() {}

func (x *AbtestUserGroupFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestUserGroupFilter.ProtoReflect.Descriptor instead.
func (*AbtestUserGroupFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{13}
}

func (x *AbtestUserGroupFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AbtestUserGroupFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AbtestUserGroupFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbtestUserGroupFilter) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *AbtestUserGroupFilter) GetEntityType() int64 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *AbtestUserGroupFilter) GetUserGroupId() int64 {
	if x != nil {
		return x.UserGroupId
	}
	return 0
}

func (x *AbtestUserGroupFilter) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AbtestUserGroupFilter) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AbtestUserGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbtestUserGroup []*AbtestUserGroup `protobuf:"bytes,1,rep,name=abtestUserGroup,proto3" json:"abtestUserGroup,omitempty"` // abtestUserGroupList
	TotalPage       int64              `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`            //
	TotalCount      int64              `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`          //
	CurPage         int64              `protobuf:"varint,4,opt,name=curPage,proto3" json:"curPage,omitempty"`                //
}

func (x *AbtestUserGroupList) Reset() {
	*x = AbtestUserGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestUserGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestUserGroupList) ProtoMessage() {}

func (x *AbtestUserGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestUserGroupList.ProtoReflect.Descriptor instead.
func (*AbtestUserGroupList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{14}
}

func (x *AbtestUserGroupList) GetAbtestUserGroup() []*AbtestUserGroup {
	if x != nil {
		return x.AbtestUserGroup
	}
	return nil
}

func (x *AbtestUserGroupList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AbtestUserGroupList) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *AbtestUserGroupList) GetCurPage() int64 {
	if x != nil {
		return x.CurPage
	}
	return 0
}

// --------------------------------abtestExperimentResult--------------------------------
type AbtestExperimentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	ExperimentId         int64  `protobuf:"varint,1,opt,name=experimentId,proto3" json:"experimentId,omitempty"`                // experimentId
	EntityId             string `protobuf:"bytes,2,opt,name=entityId,proto3" json:"entityId,omitempty"`                         // entityId
	EntityType           int64  `protobuf:"varint,3,opt,name=entityType,proto3" json:"entityType,omitempty"`                    // entityType
	ExperimentGroupId    int64  `protobuf:"varint,4,opt,name=experimentGroupId,proto3" json:"experimentGroupId,omitempty"`      // experimentGroupId
	ExperimentGroupParam string `protobuf:"bytes,5,opt,name=experimentGroupParam,proto3" json:"experimentGroupParam,omitempty"` // experimentGroupParam
	CreatedAt            int64  `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                      // createdAt
	UpdatedAt            int64  `protobuf:"varint,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`                      // updatedAt
}

func (x *AbtestExperimentResult) Reset() {
	*x = AbtestExperimentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestExperimentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestExperimentResult) ProtoMessage() {}

func (x *AbtestExperimentResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestExperimentResult.ProtoReflect.Descriptor instead.
func (*AbtestExperimentResult) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{15}
}

func (x *AbtestExperimentResult) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *AbtestExperimentResult) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *AbtestExperimentResult) GetEntityType() int64 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *AbtestExperimentResult) GetExperimentGroupId() int64 {
	if x != nil {
		return x.ExperimentGroupId
	}
	return 0
}

func (x *AbtestExperimentResult) GetExperimentGroupParam() string {
	if x != nil {
		return x.ExperimentGroupParam
	}
	return ""
}

func (x *AbtestExperimentResult) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AbtestExperimentResult) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AbtestExperimentResultFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo               int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`                            // pageNo
	PageSize             int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                        // pageSize
	ExperimentId         int64  `protobuf:"varint,3,opt,name=experimentId,proto3" json:"experimentId,omitempty"`                // experimentId
	EntityId             string `protobuf:"bytes,4,opt,name=entityId,proto3" json:"entityId,omitempty"`                         // entityId
	EntityType           int64  `protobuf:"varint,5,opt,name=entityType,proto3" json:"entityType,omitempty"`                    // entityType
	ExperimentGroupId    int64  `protobuf:"varint,6,opt,name=experimentGroupId,proto3" json:"experimentGroupId,omitempty"`      // experimentGroupId
	ExperimentGroupParam string `protobuf:"bytes,7,opt,name=experimentGroupParam,proto3" json:"experimentGroupParam,omitempty"` // experimentGroupParam
	CreatedAt            int64  `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                      // createdAt
	UpdatedAt            int64  `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`                      // updatedAt
}

func (x *AbtestExperimentResultFilter) Reset() {
	*x = AbtestExperimentResultFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestExperimentResultFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestExperimentResultFilter) ProtoMessage() {}

func (x *AbtestExperimentResultFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestExperimentResultFilter.ProtoReflect.Descriptor instead.
func (*AbtestExperimentResultFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{16}
}

func (x *AbtestExperimentResultFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AbtestExperimentResultFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AbtestExperimentResultFilter) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *AbtestExperimentResultFilter) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *AbtestExperimentResultFilter) GetEntityType() int64 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *AbtestExperimentResultFilter) GetExperimentGroupId() int64 {
	if x != nil {
		return x.ExperimentGroupId
	}
	return 0
}

func (x *AbtestExperimentResultFilter) GetExperimentGroupParam() string {
	if x != nil {
		return x.ExperimentGroupParam
	}
	return ""
}

func (x *AbtestExperimentResultFilter) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AbtestExperimentResultFilter) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AbtestExperimentResultList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbtestExperimentResult []*AbtestExperimentResult `protobuf:"bytes,1,rep,name=abtestExperimentResult,proto3" json:"abtestExperimentResult,omitempty"` // abtestExperimentResultList
	TotalPage              int64                     `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                          //
	TotalCount             int64                     `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`                        //
	CurPage                int64                     `protobuf:"varint,4,opt,name=curPage,proto3" json:"curPage,omitempty"`                              //
}

func (x *AbtestExperimentResultList) Reset() {
	*x = AbtestExperimentResultList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestExperimentResultList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestExperimentResultList) ProtoMessage() {}

func (x *AbtestExperimentResultList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestExperimentResultList.ProtoReflect.Descriptor instead.
func (*AbtestExperimentResultList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{17}
}

func (x *AbtestExperimentResultList) GetAbtestExperimentResult() []*AbtestExperimentResult {
	if x != nil {
		return x.AbtestExperimentResult
	}
	return nil
}

func (x *AbtestExperimentResultList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AbtestExperimentResultList) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *AbtestExperimentResultList) GetCurPage() int64 {
	if x != nil {
		return x.CurPage
	}
	return 0
}

type AbtestExperimentResultCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int64 `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"` //
}

func (x *AbtestExperimentResultCount) Reset() {
	*x = AbtestExperimentResultCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestExperimentResultCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestExperimentResultCount) ProtoMessage() {}

func (x *AbtestExperimentResultCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestExperimentResultCount.ProtoReflect.Descriptor instead.
func (*AbtestExperimentResultCount) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{18}
}

func (x *AbtestExperimentResultCount) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CreateAbtestExperimentResultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	ExperimentId         int64  `protobuf:"varint,1,opt,name=experimentId,proto3" json:"experimentId,omitempty"`                // experimentId
	EntityId             string `protobuf:"bytes,2,opt,name=entityId,proto3" json:"entityId,omitempty"`                         // entityId
	EntityType           int64  `protobuf:"varint,3,opt,name=entityType,proto3" json:"entityType,omitempty"`                    // entityType
	ExperimentGroupId    int64  `protobuf:"varint,4,opt,name=experimentGroupId,proto3" json:"experimentGroupId,omitempty"`      // experimentGroupId
	ExperimentGroupParam string `protobuf:"bytes,5,opt,name=experimentGroupParam,proto3" json:"experimentGroupParam,omitempty"` // experimentGroupParam
}

func (x *CreateAbtestExperimentResultResp) Reset() {
	*x = CreateAbtestExperimentResultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAbtestExperimentResultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAbtestExperimentResultResp) ProtoMessage() {}

func (x *CreateAbtestExperimentResultResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAbtestExperimentResultResp.ProtoReflect.Descriptor instead.
func (*CreateAbtestExperimentResultResp) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{19}
}

func (x *CreateAbtestExperimentResultResp) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *CreateAbtestExperimentResultResp) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *CreateAbtestExperimentResultResp) GetEntityType() int64 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *CreateAbtestExperimentResultResp) GetExperimentGroupId() int64 {
	if x != nil {
		return x.ExperimentGroupId
	}
	return 0
}

func (x *CreateAbtestExperimentResultResp) GetExperimentGroupParam() string {
	if x != nil {
		return x.ExperimentGroupParam
	}
	return ""
}

// --------------------------------实验用户群配置表--------------------------------
type AbtestUserGroupConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                          //自增ID
	UserFactorId   int64  `protobuf:"varint,2,opt,name=userFactorId,proto3" json:"userFactorId,omitempty"`      //用户因子ID：abtest_user_factor_config表主键ID
	IsAllUser      int64  `protobuf:"varint,3,opt,name=isAllUser,proto3" json:"isAllUser,omitempty"`            //是否全量用户 1：是 0：否
	Name           string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                       //用户群名称
	Terminal       string `protobuf:"bytes,5,opt,name=terminal,proto3" json:"terminal,omitempty"`               //渠道端口
	UserDimType    int64  `protobuf:"varint,6,opt,name=userDimType,proto3" json:"userDimType,omitempty"`        //用户维度：1：USERID，2：ALIPAYID
	StartTime      int64  `protobuf:"varint,7,opt,name=startTime,proto3" json:"startTime,omitempty"`            //开始时间
	EndTime        int64  `protobuf:"varint,8,opt,name=endTime,proto3" json:"endTime,omitempty"`                //结束时间
	UserCount      int64  `protobuf:"varint,9,opt,name=userCount,proto3" json:"userCount,omitempty"`            //冗余字段：用户群数量
	Remark         string `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`                  //备注
	CreatedBy      int64  `protobuf:"varint,11,opt,name=createdBy,proto3" json:"createdBy,omitempty"`           //创建人ID
	CreatedAt      int64  `protobuf:"varint,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`           //创建时间
	UpdatedAt      int64  `protobuf:"varint,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`           //更新时间
	UserFactorType int64  `protobuf:"varint,14,opt,name=userFactorType,proto3" json:"userFactorType,omitempty"` //用户群因子类型：1：预设因子 2：自定义因子
	Rule           string `protobuf:"bytes,15,opt,name=rule,proto3" json:"rule,omitempty"`                      //自定义因子规则
}

func (x *AbtestUserGroupConf) Reset() {
	*x = AbtestUserGroupConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestUserGroupConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestUserGroupConf) ProtoMessage() {}

func (x *AbtestUserGroupConf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestUserGroupConf.ProtoReflect.Descriptor instead.
func (*AbtestUserGroupConf) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{20}
}

func (x *AbtestUserGroupConf) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbtestUserGroupConf) GetUserFactorId() int64 {
	if x != nil {
		return x.UserFactorId
	}
	return 0
}

func (x *AbtestUserGroupConf) GetIsAllUser() int64 {
	if x != nil {
		return x.IsAllUser
	}
	return 0
}

func (x *AbtestUserGroupConf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbtestUserGroupConf) GetTerminal() string {
	if x != nil {
		return x.Terminal
	}
	return ""
}

func (x *AbtestUserGroupConf) GetUserDimType() int64 {
	if x != nil {
		return x.UserDimType
	}
	return 0
}

func (x *AbtestUserGroupConf) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AbtestUserGroupConf) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AbtestUserGroupConf) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *AbtestUserGroupConf) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AbtestUserGroupConf) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *AbtestUserGroupConf) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AbtestUserGroupConf) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AbtestUserGroupConf) GetUserFactorType() int64 {
	if x != nil {
		return x.UserFactorType
	}
	return 0
}

func (x *AbtestUserGroupConf) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

type AbtestUserGroupConfFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo         int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`                  // pageNo
	PageSize       int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`              // pageSize
	Id             uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                          //自增ID
	UserFactorId   int64  `protobuf:"varint,4,opt,name=userFactorId,proto3" json:"userFactorId,omitempty"`      //用户因子ID：abtest_user_factor_config表主键ID
	IsAllUser      int64  `protobuf:"varint,5,opt,name=isAllUser,proto3" json:"isAllUser,omitempty"`            //是否全量用户 1：是 0：否
	Name           string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                       //用户群名称
	Terminal       string `protobuf:"bytes,7,opt,name=terminal,proto3" json:"terminal,omitempty"`               //渠道端口
	UserDimType    int64  `protobuf:"varint,8,opt,name=userDimType,proto3" json:"userDimType,omitempty"`        //用户维度：1：USERID，2：ALIPAYID
	StartTime      int64  `protobuf:"varint,9,opt,name=startTime,proto3" json:"startTime,omitempty"`            //开始时间
	EndTime        int64  `protobuf:"varint,10,opt,name=endTime,proto3" json:"endTime,omitempty"`               //结束时间
	UserCount      int64  `protobuf:"varint,11,opt,name=userCount,proto3" json:"userCount,omitempty"`           //冗余字段：用户群数量
	Remark         string `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`                  //备注
	CreatedBy      int64  `protobuf:"varint,13,opt,name=createdBy,proto3" json:"createdBy,omitempty"`           //创建人ID
	CreatedAt      int64  `protobuf:"varint,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`           //创建时间
	UpdatedAt      int64  `protobuf:"varint,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`           //更新时间
	UserFactorType int64  `protobuf:"varint,16,opt,name=userFactorType,proto3" json:"userFactorType,omitempty"` //用户群因子类型：1：预设因子 2：自定义因子
	Rule           string `protobuf:"bytes,17,opt,name=rule,proto3" json:"rule,omitempty"`                      //自定义因子规则
}

func (x *AbtestUserGroupConfFilter) Reset() {
	*x = AbtestUserGroupConfFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestUserGroupConfFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestUserGroupConfFilter) ProtoMessage() {}

func (x *AbtestUserGroupConfFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestUserGroupConfFilter.ProtoReflect.Descriptor instead.
func (*AbtestUserGroupConfFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{21}
}

func (x *AbtestUserGroupConfFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetUserFactorId() int64 {
	if x != nil {
		return x.UserFactorId
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetIsAllUser() int64 {
	if x != nil {
		return x.IsAllUser
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbtestUserGroupConfFilter) GetTerminal() string {
	if x != nil {
		return x.Terminal
	}
	return ""
}

func (x *AbtestUserGroupConfFilter) GetUserDimType() int64 {
	if x != nil {
		return x.UserDimType
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AbtestUserGroupConfFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetUserFactorType() int64 {
	if x != nil {
		return x.UserFactorType
	}
	return 0
}

func (x *AbtestUserGroupConfFilter) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

type AbtestUserGroupConfList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbtestUserGroupConf []*AbtestUserGroupConf `protobuf:"bytes,1,rep,name=abtestUserGroupConf,proto3" json:"abtestUserGroupConf,omitempty"` // abtestUserGroupConfList
	TotalPage           int64                  `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                    //
	TotalCount          int64                  `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`                  //
	CurPage             int64                  `protobuf:"varint,4,opt,name=curPage,proto3" json:"curPage,omitempty"`                        //
}

func (x *AbtestUserGroupConfList) Reset() {
	*x = AbtestUserGroupConfList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbtestUserGroupConfList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbtestUserGroupConfList) ProtoMessage() {}

func (x *AbtestUserGroupConfList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbtestUserGroupConfList.ProtoReflect.Descriptor instead.
func (*AbtestUserGroupConfList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{22}
}

func (x *AbtestUserGroupConfList) GetAbtestUserGroupConf() []*AbtestUserGroupConf {
	if x != nil {
		return x.AbtestUserGroupConf
	}
	return nil
}

func (x *AbtestUserGroupConfList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AbtestUserGroupConfList) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *AbtestUserGroupConfList) GetCurPage() int64 {
	if x != nil {
		return x.CurPage
	}
	return 0
}

// --------------------------------COLUMNAR=1 用户关联支付宝表--------------------------------
type TblUserAlipay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	AlipayAutoId       uint64 `protobuf:"varint,1,opt,name=alipayAutoId,proto3" json:"alipayAutoId,omitempty"`             //自增ID
	AlipayUserId       string `protobuf:"bytes,2,opt,name=alipayUserId,proto3" json:"alipayUserId,omitempty"`              //支付宝ID
	Uid                uint64 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`                               //用户ID
	Mobile             string `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`                          //手机
	UserName           string `protobuf:"bytes,5,opt,name=userName,proto3" json:"userName,omitempty"`                      //真实姓名
	Avatar             string `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`                          //头像
	NickName           string `protobuf:"bytes,7,opt,name=nickName,proto3" json:"nickName,omitempty"`                      //用户昵称
	Province           string `protobuf:"bytes,8,opt,name=province,proto3" json:"province,omitempty"`                      //省份
	City               string `protobuf:"bytes,9,opt,name=city,proto3" json:"city,omitempty"`                              //城市
	Gender             string `protobuf:"bytes,10,opt,name=gender,proto3" json:"gender,omitempty"`                         //用户性别
	UserType           string `protobuf:"bytes,11,opt,name=userType,proto3" json:"userType,omitempty"`                     //用户类型
	UserStatus         string `protobuf:"bytes,12,opt,name=userStatus,proto3" json:"userStatus,omitempty"`                 //用户状态
	IsCertified        string `protobuf:"bytes,13,opt,name=isCertified,proto3" json:"isCertified,omitempty"`               //是否实名
	IsStudentCertified string `protobuf:"bytes,14,opt,name=isStudentCertified,proto3" json:"isStudentCertified,omitempty"` //是否学生
	ZhimaScore         uint64 `protobuf:"varint,15,opt,name=zhimaScore,proto3" json:"zhimaScore,omitempty"`                //芝麻分数
	UpdatedAt          uint64 `protobuf:"varint,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`                  //更新时间
}

func (x *TblUserAlipay) Reset() {
	*x = TblUserAlipay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblUserAlipay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblUserAlipay) ProtoMessage() {}

func (x *TblUserAlipay) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblUserAlipay.ProtoReflect.Descriptor instead.
func (*TblUserAlipay) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{23}
}

func (x *TblUserAlipay) GetAlipayAutoId() uint64 {
	if x != nil {
		return x.AlipayAutoId
	}
	return 0
}

func (x *TblUserAlipay) GetAlipayUserId() string {
	if x != nil {
		return x.AlipayUserId
	}
	return ""
}

func (x *TblUserAlipay) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TblUserAlipay) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *TblUserAlipay) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *TblUserAlipay) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *TblUserAlipay) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *TblUserAlipay) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *TblUserAlipay) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *TblUserAlipay) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *TblUserAlipay) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *TblUserAlipay) GetUserStatus() string {
	if x != nil {
		return x.UserStatus
	}
	return ""
}

func (x *TblUserAlipay) GetIsCertified() string {
	if x != nil {
		return x.IsCertified
	}
	return ""
}

func (x *TblUserAlipay) GetIsStudentCertified() string {
	if x != nil {
		return x.IsStudentCertified
	}
	return ""
}

func (x *TblUserAlipay) GetZhimaScore() uint64 {
	if x != nil {
		return x.ZhimaScore
	}
	return 0
}

func (x *TblUserAlipay) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type TblUserAlipayFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo             int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`                         // pageNo
	PageSize           int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                     // pageSize
	AlipayAutoId       uint64 `protobuf:"varint,3,opt,name=alipayAutoId,proto3" json:"alipayAutoId,omitempty"`             //自增ID
	AlipayUserId       string `protobuf:"bytes,4,opt,name=alipayUserId,proto3" json:"alipayUserId,omitempty"`              //支付宝ID
	Uid                uint64 `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`                               //用户ID
	Mobile             string `protobuf:"bytes,6,opt,name=mobile,proto3" json:"mobile,omitempty"`                          //手机
	UserName           string `protobuf:"bytes,7,opt,name=userName,proto3" json:"userName,omitempty"`                      //真实姓名
	Avatar             string `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`                          //头像
	NickName           string `protobuf:"bytes,9,opt,name=nickName,proto3" json:"nickName,omitempty"`                      //用户昵称
	Province           string `protobuf:"bytes,10,opt,name=province,proto3" json:"province,omitempty"`                     //省份
	City               string `protobuf:"bytes,11,opt,name=city,proto3" json:"city,omitempty"`                             //城市
	Gender             string `protobuf:"bytes,12,opt,name=gender,proto3" json:"gender,omitempty"`                         //用户性别
	UserType           string `protobuf:"bytes,13,opt,name=userType,proto3" json:"userType,omitempty"`                     //用户类型
	UserStatus         string `protobuf:"bytes,14,opt,name=userStatus,proto3" json:"userStatus,omitempty"`                 //用户状态
	IsCertified        string `protobuf:"bytes,15,opt,name=isCertified,proto3" json:"isCertified,omitempty"`               //是否实名
	IsStudentCertified string `protobuf:"bytes,16,opt,name=isStudentCertified,proto3" json:"isStudentCertified,omitempty"` //是否学生
	ZhimaScore         uint64 `protobuf:"varint,17,opt,name=zhimaScore,proto3" json:"zhimaScore,omitempty"`                //芝麻分数
	UpdatedAt          uint64 `protobuf:"varint,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`                  //更新时间
}

func (x *TblUserAlipayFilter) Reset() {
	*x = TblUserAlipayFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblUserAlipayFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblUserAlipayFilter) ProtoMessage() {}

func (x *TblUserAlipayFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblUserAlipayFilter.ProtoReflect.Descriptor instead.
func (*TblUserAlipayFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{24}
}

func (x *TblUserAlipayFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TblUserAlipayFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TblUserAlipayFilter) GetAlipayAutoId() uint64 {
	if x != nil {
		return x.AlipayAutoId
	}
	return 0
}

func (x *TblUserAlipayFilter) GetAlipayUserId() string {
	if x != nil {
		return x.AlipayUserId
	}
	return ""
}

func (x *TblUserAlipayFilter) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TblUserAlipayFilter) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *TblUserAlipayFilter) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *TblUserAlipayFilter) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *TblUserAlipayFilter) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *TblUserAlipayFilter) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *TblUserAlipayFilter) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *TblUserAlipayFilter) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *TblUserAlipayFilter) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *TblUserAlipayFilter) GetUserStatus() string {
	if x != nil {
		return x.UserStatus
	}
	return ""
}

func (x *TblUserAlipayFilter) GetIsCertified() string {
	if x != nil {
		return x.IsCertified
	}
	return ""
}

func (x *TblUserAlipayFilter) GetIsStudentCertified() string {
	if x != nil {
		return x.IsStudentCertified
	}
	return ""
}

func (x *TblUserAlipayFilter) GetZhimaScore() uint64 {
	if x != nil {
		return x.ZhimaScore
	}
	return 0
}

func (x *TblUserAlipayFilter) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type TblUserAlipayList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TblUserAlipay []*TblUserAlipay `protobuf:"bytes,1,rep,name=tblUserAlipay,proto3" json:"tblUserAlipay,omitempty"` // tblUserAlipayList
	TotalPage     int64            `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`        //
	TotalCount    int64            `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`      //
	CurPage       int64            `protobuf:"varint,4,opt,name=curPage,proto3" json:"curPage,omitempty"`            //
}

func (x *TblUserAlipayList) Reset() {
	*x = TblUserAlipayList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblUserAlipayList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblUserAlipayList) ProtoMessage() {}

func (x *TblUserAlipayList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblUserAlipayList.ProtoReflect.Descriptor instead.
func (*TblUserAlipayList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{25}
}

func (x *TblUserAlipayList) GetTblUserAlipay() []*TblUserAlipay {
	if x != nil {
		return x.TblUserAlipay
	}
	return nil
}

func (x *TblUserAlipayList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *TblUserAlipayList) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *TblUserAlipayList) GetCurPage() int64 {
	if x != nil {
		return x.CurPage
	}
	return 0
}

// --------------------------------Allocate--------------------------------
type AllocateRpcReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentUniqId string `protobuf:"bytes,1,opt,name=experimentUniqId,proto3" json:"experimentUniqId,omitempty"` // 实验唯一id
	DistinctId       string `protobuf:"bytes,2,opt,name=distinctId,proto3" json:"distinctId,omitempty"`             // id(用户id，匿名id)
	Terminal         string `protobuf:"bytes,3,opt,name=terminal,proto3" json:"terminal,omitempty"`                 // 终端：0:对照组 1:实验组
	Version          string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                   // 版本号
	ModelType        string `protobuf:"bytes,5,opt,name=modelType,proto3" json:"modelType,omitempty"`               // 分流模型：目前只支持ab测试
}

func (x *AllocateRpcReq) Reset() {
	*x = AllocateRpcReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateRpcReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateRpcReq) ProtoMessage() {}

func (x *AllocateRpcReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateRpcReq.ProtoReflect.Descriptor instead.
func (*AllocateRpcReq) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{26}
}

func (x *AllocateRpcReq) GetExperimentUniqId() string {
	if x != nil {
		return x.ExperimentUniqId
	}
	return ""
}

func (x *AllocateRpcReq) GetDistinctId() string {
	if x != nil {
		return x.DistinctId
	}
	return ""
}

func (x *AllocateRpcReq) GetTerminal() string {
	if x != nil {
		return x.Terminal
	}
	return ""
}

func (x *AllocateRpcReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AllocateRpcReq) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

type AllocateRpcResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId        int64  `protobuf:"varint,1,opt,name=experimentId,proto3" json:"experimentId,omitempty"`               // 实验id
	ExperimentType      int64  `protobuf:"varint,2,opt,name=experimentType,proto3" json:"experimentType,omitempty"`           // 实验类型
	ExperimentUniqId    string `protobuf:"bytes,3,opt,name=experimentUniqId,proto3" json:"experimentUniqId,omitempty"`        // 实验唯一id
	ExperimentGroupId   int64  `protobuf:"varint,4,opt,name=experimentGroupId,proto3" json:"experimentGroupId,omitempty"`     // 分组id
	ExperimentGroupName string `protobuf:"bytes,5,opt,name=experimentGroupName,proto3" json:"experimentGroupName,omitempty"`  // 分组名称
	ExperimentGroupType int64  `protobuf:"varint,6,opt,name=experimentGroupType,proto3" json:"experimentGroupType,omitempty"` // 分组类型
	IsWhite             uint32 `protobuf:"varint,7,opt,name=isWhite,proto3" json:"isWhite,omitempty"`                         // 是否是白名单
	ParamId             string `protobuf:"bytes,8,opt,name=paramId,proto3" json:"paramId,omitempty"`                          // 参数
	ParamType           int64  `protobuf:"varint,9,opt,name=paramType,proto3" json:"paramType,omitempty"`                     // 参数
	ParamVal            string `protobuf:"bytes,10,opt,name=paramVal,proto3" json:"paramVal,omitempty"`                       // 参数
	DistinctId          string `protobuf:"bytes,11,opt,name=distinctId,proto3" json:"distinctId,omitempty"`                   // 匿名id(用户id，匿名id)
}

func (x *AllocateRpcResp) Reset() {
	*x = AllocateRpcResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateRpcResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateRpcResp) ProtoMessage() {}

func (x *AllocateRpcResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateRpcResp.ProtoReflect.Descriptor instead.
func (*AllocateRpcResp) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{27}
}

func (x *AllocateRpcResp) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *AllocateRpcResp) GetExperimentType() int64 {
	if x != nil {
		return x.ExperimentType
	}
	return 0
}

func (x *AllocateRpcResp) GetExperimentUniqId() string {
	if x != nil {
		return x.ExperimentUniqId
	}
	return ""
}

func (x *AllocateRpcResp) GetExperimentGroupId() int64 {
	if x != nil {
		return x.ExperimentGroupId
	}
	return 0
}

func (x *AllocateRpcResp) GetExperimentGroupName() string {
	if x != nil {
		return x.ExperimentGroupName
	}
	return ""
}

func (x *AllocateRpcResp) GetExperimentGroupType() int64 {
	if x != nil {
		return x.ExperimentGroupType
	}
	return 0
}

func (x *AllocateRpcResp) GetIsWhite() uint32 {
	if x != nil {
		return x.IsWhite
	}
	return 0
}

func (x *AllocateRpcResp) GetParamId() string {
	if x != nil {
		return x.ParamId
	}
	return ""
}

func (x *AllocateRpcResp) GetParamType() int64 {
	if x != nil {
		return x.ParamType
	}
	return 0
}

func (x *AllocateRpcResp) GetParamVal() string {
	if x != nil {
		return x.ParamVal
	}
	return ""
}

func (x *AllocateRpcResp) GetDistinctId() string {
	if x != nil {
		return x.DistinctId
	}
	return ""
}

type DispatchRpcReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId    int64 `protobuf:"varint,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	ActivityId int64 `protobuf:"varint,2,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
}

func (x *DispatchRpcReq) Reset() {
	*x = DispatchRpcReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchRpcReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchRpcReq) ProtoMessage() {}

func (x *DispatchRpcReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchRpcReq.ProtoReflect.Descriptor instead.
func (*DispatchRpcReq) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{28}
}

func (x *DispatchRpcReq) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *DispatchRpcReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type DispatchRpcResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=ServerId,proto3" json:"ServerId,omitempty"`
}

func (x *DispatchRpcResp) Reset() {
	*x = DispatchRpcResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchRpcResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchRpcResp) ProtoMessage() {}

func (x *DispatchRpcResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchRpcResp.ProtoReflect.Descriptor instead.
func (*DispatchRpcResp) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{29}
}

func (x *DispatchRpcResp) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type QualityRatioLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId   int64   `protobuf:"varint,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	SpuId     int64   `protobuf:"varint,2,opt,name=SpuId,proto3" json:"SpuId,omitempty"`
	ServerIds []int64 `protobuf:"varint,3,rep,packed,name=ServerIds,proto3" json:"ServerIds,omitempty"`
}

func (x *QualityRatioLimitReq) Reset() {
	*x = QualityRatioLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityRatioLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityRatioLimitReq) ProtoMessage() {}

func (x *QualityRatioLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityRatioLimitReq.ProtoReflect.Descriptor instead.
func (*QualityRatioLimitReq) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{30}
}

func (x *QualityRatioLimitReq) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *QualityRatioLimitReq) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *QualityRatioLimitReq) GetServerIds() []int64 {
	if x != nil {
		return x.ServerIds
	}
	return nil
}

type QualityRatioLimitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityRatioLimitMap string `protobuf:"bytes,1,opt,name=QualityRatioLimitMap,proto3" json:"QualityRatioLimitMap,omitempty"`
}

func (x *QualityRatioLimitResp) Reset() {
	*x = QualityRatioLimitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityRatioLimitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityRatioLimitResp) ProtoMessage() {}

func (x *QualityRatioLimitResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityRatioLimitResp.ProtoReflect.Descriptor instead.
func (*QualityRatioLimitResp) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{31}
}

func (x *QualityRatioLimitResp) GetQualityRatioLimitMap() string {
	if x != nil {
		return x.QualityRatioLimitMap
	}
	return ""
}

// --------------------------------自动化派单决策路径表--------------------------------
type AutoDispatchDecisionPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                  // ID
	Pid         uint64 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`                //父级ID(关联auto_dispatch_decision_path的id)
	ConfigId    uint64 `protobuf:"varint,3,opt,name=configId,proto3" json:"configId,omitempty"`      //全局配置ID
	PathName    string `protobuf:"bytes,4,opt,name=pathName,proto3" json:"pathName,omitempty"`       //路径名称
	PathDetail  string `protobuf:"bytes,5,opt,name=pathDetail,proto3" json:"pathDetail,omitempty"`   //路径说明
	ApplyFactor string `protobuf:"bytes,6,opt,name=applyFactor,proto3" json:"applyFactor,omitempty"` //应用因子
	CreatedAt   uint64 `protobuf:"varint,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`    //创建时间
	CreatedBy   uint64 `protobuf:"varint,8,opt,name=createdBy,proto3" json:"createdBy,omitempty"`    //创建人
}

func (x *AutoDispatchDecisionPath) Reset() {
	*x = AutoDispatchDecisionPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionPath) ProtoMessage() {}

func (x *AutoDispatchDecisionPath) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionPath.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionPath) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{32}
}

func (x *AutoDispatchDecisionPath) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AutoDispatchDecisionPath) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *AutoDispatchDecisionPath) GetConfigId() uint64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *AutoDispatchDecisionPath) GetPathName() string {
	if x != nil {
		return x.PathName
	}
	return ""
}

func (x *AutoDispatchDecisionPath) GetPathDetail() string {
	if x != nil {
		return x.PathDetail
	}
	return ""
}

func (x *AutoDispatchDecisionPath) GetApplyFactor() string {
	if x != nil {
		return x.ApplyFactor
	}
	return ""
}

func (x *AutoDispatchDecisionPath) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AutoDispatchDecisionPath) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

type AutoDispatchDecisionPathFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo      int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`          // pageNo
	PageSize    int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`      // pageSize
	Id          uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                  // ID
	Pid         uint64 `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`                //父级ID(关联auto_dispatch_decision_path的id)
	ConfigId    uint64 `protobuf:"varint,5,opt,name=configId,proto3" json:"configId,omitempty"`      //全局配置ID
	PathName    string `protobuf:"bytes,6,opt,name=pathName,proto3" json:"pathName,omitempty"`       //路径名称
	PathDetail  string `protobuf:"bytes,7,opt,name=pathDetail,proto3" json:"pathDetail,omitempty"`   //路径说明
	ApplyFactor string `protobuf:"bytes,8,opt,name=applyFactor,proto3" json:"applyFactor,omitempty"` //应用因子
	CreatedAt   uint64 `protobuf:"varint,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`    //创建时间
	CreatedBy   uint64 `protobuf:"varint,10,opt,name=createdBy,proto3" json:"createdBy,omitempty"`   //创建人
}

func (x *AutoDispatchDecisionPathFilter) Reset() {
	*x = AutoDispatchDecisionPathFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionPathFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionPathFilter) ProtoMessage() {}

func (x *AutoDispatchDecisionPathFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionPathFilter.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionPathFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{33}
}

func (x *AutoDispatchDecisionPathFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AutoDispatchDecisionPathFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AutoDispatchDecisionPathFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AutoDispatchDecisionPathFilter) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *AutoDispatchDecisionPathFilter) GetConfigId() uint64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *AutoDispatchDecisionPathFilter) GetPathName() string {
	if x != nil {
		return x.PathName
	}
	return ""
}

func (x *AutoDispatchDecisionPathFilter) GetPathDetail() string {
	if x != nil {
		return x.PathDetail
	}
	return ""
}

func (x *AutoDispatchDecisionPathFilter) GetApplyFactor() string {
	if x != nil {
		return x.ApplyFactor
	}
	return ""
}

func (x *AutoDispatchDecisionPathFilter) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AutoDispatchDecisionPathFilter) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

type AutoDispatchDecisionPathList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoDispatchDecisionPath []*AutoDispatchDecisionPath `protobuf:"bytes,1,rep,name=autoDispatchDecisionPath,proto3" json:"autoDispatchDecisionPath,omitempty"` // autoDispatchDecisionPathList
	TotalPage                int64                       `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                              //
	TotalCount               int64                       `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`                            //
	CurPage                  int64                       `protobuf:"varint,4,opt,name=curPage,proto3" json:"curPage,omitempty"`                                  //
}

func (x *AutoDispatchDecisionPathList) Reset() {
	*x = AutoDispatchDecisionPathList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionPathList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionPathList) ProtoMessage() {}

func (x *AutoDispatchDecisionPathList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionPathList.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionPathList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{34}
}

func (x *AutoDispatchDecisionPathList) GetAutoDispatchDecisionPath() []*AutoDispatchDecisionPath {
	if x != nil {
		return x.AutoDispatchDecisionPath
	}
	return nil
}

func (x *AutoDispatchDecisionPathList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AutoDispatchDecisionPathList) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *AutoDispatchDecisionPathList) GetCurPage() int64 {
	if x != nil {
		return x.CurPage
	}
	return 0
}

// --------------------------------活动订单spu--------------------------------
type CommodityActivityOrderSpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                   // id
	OrderId     int64  `protobuf:"varint,2,opt,name=orderId,proto3" json:"orderId,omitempty"`         //订单号
	GoodsRuleId int64  `protobuf:"varint,3,opt,name=goodsRuleId,proto3" json:"goodsRuleId,omitempty"` //活动商品规则ID
	ActivityId  int64  `protobuf:"varint,4,opt,name=activityId,proto3" json:"activityId,omitempty"`   //活动ID
	CategoryId  int64  `protobuf:"varint,5,opt,name=categoryId,proto3" json:"categoryId,omitempty"`   //类目ID
	BrandId     int64  `protobuf:"varint,6,opt,name=brandId,proto3" json:"brandId,omitempty"`         //品牌ID
	SpuModelId  int64  `protobuf:"varint,7,opt,name=spuModelId,proto3" json:"spuModelId,omitempty"`   //型号ID
	SpuType     int64  `protobuf:"varint,8,opt,name=spuType,proto3" json:"spuType,omitempty"`         //全新度（1全新,2二手）
	CreatedAt   int64  `protobuf:"varint,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`     //创建时间
}

func (x *CommodityActivityOrderSpu) Reset() {
	*x = CommodityActivityOrderSpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityActivityOrderSpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityActivityOrderSpu) ProtoMessage() {}

func (x *CommodityActivityOrderSpu) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityActivityOrderSpu.ProtoReflect.Descriptor instead.
func (*CommodityActivityOrderSpu) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{35}
}

func (x *CommodityActivityOrderSpu) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommodityActivityOrderSpu) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CommodityActivityOrderSpu) GetGoodsRuleId() int64 {
	if x != nil {
		return x.GoodsRuleId
	}
	return 0
}

func (x *CommodityActivityOrderSpu) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *CommodityActivityOrderSpu) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CommodityActivityOrderSpu) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *CommodityActivityOrderSpu) GetSpuModelId() int64 {
	if x != nil {
		return x.SpuModelId
	}
	return 0
}

func (x *CommodityActivityOrderSpu) GetSpuType() int64 {
	if x != nil {
		return x.SpuType
	}
	return 0
}

func (x *CommodityActivityOrderSpu) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type CommodityActivityOrderSpuFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo      int64    `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`           // pageNo
	PageSize    int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`       // pageSize
	SortField   []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`      // sortField
	SortType    []string `protobuf:"bytes,4,rep,name=sortType,proto3" json:"sortType,omitempty"`        // sortType
	GenTotal    bool     `protobuf:"varint,5,opt,name=genTotal,proto3" json:"genTotal,omitempty"`       // genTotal
	Id          uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                   // id
	OrderId     int64    `protobuf:"varint,7,opt,name=orderId,proto3" json:"orderId,omitempty"`         //订单号
	GoodsRuleId int64    `protobuf:"varint,8,opt,name=goodsRuleId,proto3" json:"goodsRuleId,omitempty"` //活动商品规则ID
	ActivityId  int64    `protobuf:"varint,9,opt,name=activityId,proto3" json:"activityId,omitempty"`   //活动ID
	CategoryId  int64    `protobuf:"varint,10,opt,name=categoryId,proto3" json:"categoryId,omitempty"`  //类目ID
	BrandId     int64    `protobuf:"varint,11,opt,name=brandId,proto3" json:"brandId,omitempty"`        //品牌ID
	SpuModelId  int64    `protobuf:"varint,12,opt,name=spuModelId,proto3" json:"spuModelId,omitempty"`  //型号ID
	SpuType     int64    `protobuf:"varint,13,opt,name=spuType,proto3" json:"spuType,omitempty"`        //全新度（1全新,2二手）
	CreatedAt   int64    `protobuf:"varint,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`    //创建时间
}

func (x *CommodityActivityOrderSpuFilter) Reset() {
	*x = CommodityActivityOrderSpuFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityActivityOrderSpuFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityActivityOrderSpuFilter) ProtoMessage() {}

func (x *CommodityActivityOrderSpuFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityActivityOrderSpuFilter.ProtoReflect.Descriptor instead.
func (*CommodityActivityOrderSpuFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{36}
}

func (x *CommodityActivityOrderSpuFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *CommodityActivityOrderSpuFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommodityActivityOrderSpuFilter) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *CommodityActivityOrderSpuFilter) GetSortType() []string {
	if x != nil {
		return x.SortType
	}
	return nil
}

func (x *CommodityActivityOrderSpuFilter) GetGenTotal() bool {
	if x != nil {
		return x.GenTotal
	}
	return false
}

func (x *CommodityActivityOrderSpuFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommodityActivityOrderSpuFilter) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CommodityActivityOrderSpuFilter) GetGoodsRuleId() int64 {
	if x != nil {
		return x.GoodsRuleId
	}
	return 0
}

func (x *CommodityActivityOrderSpuFilter) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *CommodityActivityOrderSpuFilter) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CommodityActivityOrderSpuFilter) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *CommodityActivityOrderSpuFilter) GetSpuModelId() int64 {
	if x != nil {
		return x.SpuModelId
	}
	return 0
}

func (x *CommodityActivityOrderSpuFilter) GetSpuType() int64 {
	if x != nil {
		return x.SpuType
	}
	return 0
}

func (x *CommodityActivityOrderSpuFilter) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type CommodityActivityOrderSpuList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommodityActivityOrderSpu []*CommodityActivityOrderSpu `protobuf:"bytes,1,rep,name=commodityActivityOrderSpu,proto3" json:"commodityActivityOrderSpu,omitempty"` // commodityActivityOrderSpuList
	TotalPage                 int64                        `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                                //总页数
	Total                     int64                        `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                        //总数据量
	PerPage                   int32                        `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`                                    //当前第几页
	PerSize                   int32                        `protobuf:"varint,5,opt,name=perSize,proto3" json:"perSize,omitempty"`                                    //每页数据量
	Count                     int32                        `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                        //当前页实际数量
}

func (x *CommodityActivityOrderSpuList) Reset() {
	*x = CommodityActivityOrderSpuList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityActivityOrderSpuList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityActivityOrderSpuList) ProtoMessage() {}

func (x *CommodityActivityOrderSpuList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityActivityOrderSpuList.ProtoReflect.Descriptor instead.
func (*CommodityActivityOrderSpuList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{37}
}

func (x *CommodityActivityOrderSpuList) GetCommodityActivityOrderSpu() []*CommodityActivityOrderSpu {
	if x != nil {
		return x.CommodityActivityOrderSpu
	}
	return nil
}

func (x *CommodityActivityOrderSpuList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *CommodityActivityOrderSpuList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommodityActivityOrderSpuList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *CommodityActivityOrderSpuList) GetPerSize() int32 {
	if x != nil {
		return x.PerSize
	}
	return 0
}

func (x *CommodityActivityOrderSpuList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// --------------------------------派单因子表--------------------------------
type TblDispatchOrderFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                // ID
	FactorName string `protobuf:"bytes,2,opt,name=factorName,proto3" json:"factorName,omitempty"` //因子名称
	Type       uint64 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`            //类型（1数值型，2字符串）
	Sort       uint64 `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`            //分类（1商家，2订单，3活动，4商品）
	Code       string `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`             //因子代码
	Condition  string `protobuf:"bytes,6,opt,name=condition,proto3" json:"condition,omitempty"`   //条件值
	Status     uint64 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`        //状态（1待使用2使用中）
	CreatedAt  uint64 `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`  //创建时间
	CreatedBy  uint64 `protobuf:"varint,9,opt,name=createdBy,proto3" json:"createdBy,omitempty"`  //创建人
	UpdatedAt  uint64 `protobuf:"varint,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"` //更新时间
	UpdatedBy  uint64 `protobuf:"varint,11,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"` //更新人
	IsDeleted  uint64 `protobuf:"varint,12,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"` //是否删除
}

func (x *TblDispatchOrderFactor) Reset() {
	*x = TblDispatchOrderFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblDispatchOrderFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblDispatchOrderFactor) ProtoMessage() {}

func (x *TblDispatchOrderFactor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblDispatchOrderFactor.ProtoReflect.Descriptor instead.
func (*TblDispatchOrderFactor) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{38}
}

func (x *TblDispatchOrderFactor) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TblDispatchOrderFactor) GetFactorName() string {
	if x != nil {
		return x.FactorName
	}
	return ""
}

func (x *TblDispatchOrderFactor) GetType() uint64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TblDispatchOrderFactor) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TblDispatchOrderFactor) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TblDispatchOrderFactor) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *TblDispatchOrderFactor) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TblDispatchOrderFactor) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TblDispatchOrderFactor) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *TblDispatchOrderFactor) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TblDispatchOrderFactor) GetUpdatedBy() uint64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *TblDispatchOrderFactor) GetIsDeleted() uint64 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

type TblDispatchOrderFactorFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo     int64    `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`        // pageNo
	PageSize   int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`    // pageSize
	SortField  []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`   // sortField
	SortType   []string `protobuf:"bytes,4,rep,name=sortType,proto3" json:"sortType,omitempty"`     // sortType
	GenTotal   bool     `protobuf:"varint,5,opt,name=genTotal,proto3" json:"genTotal,omitempty"`    // genTotal
	Id         uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                // ID
	FactorName string   `protobuf:"bytes,7,opt,name=factorName,proto3" json:"factorName,omitempty"` //因子名称
	Type       uint64   `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`            //类型（1数值型，2字符串）
	Sort       uint64   `protobuf:"varint,9,opt,name=sort,proto3" json:"sort,omitempty"`            //分类（1商家，2订单，3活动，4商品）
	Code       string   `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`            //因子代码
	Condition  string   `protobuf:"bytes,11,opt,name=condition,proto3" json:"condition,omitempty"`  //条件值
	Status     uint64   `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`       //状态（1待使用2使用中）
	CreatedAt  uint64   `protobuf:"varint,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"` //创建时间
	CreatedBy  uint64   `protobuf:"varint,14,opt,name=createdBy,proto3" json:"createdBy,omitempty"` //创建人
	UpdatedAt  uint64   `protobuf:"varint,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"` //更新时间
	UpdatedBy  uint64   `protobuf:"varint,16,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"` //更新人
	IsDeleted  uint64   `protobuf:"varint,17,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"` //是否删除
}

func (x *TblDispatchOrderFactorFilter) Reset() {
	*x = TblDispatchOrderFactorFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblDispatchOrderFactorFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblDispatchOrderFactorFilter) ProtoMessage() {}

func (x *TblDispatchOrderFactorFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblDispatchOrderFactorFilter.ProtoReflect.Descriptor instead.
func (*TblDispatchOrderFactorFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{39}
}

func (x *TblDispatchOrderFactorFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TblDispatchOrderFactorFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TblDispatchOrderFactorFilter) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *TblDispatchOrderFactorFilter) GetSortType() []string {
	if x != nil {
		return x.SortType
	}
	return nil
}

func (x *TblDispatchOrderFactorFilter) GetGenTotal() bool {
	if x != nil {
		return x.GenTotal
	}
	return false
}

func (x *TblDispatchOrderFactorFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TblDispatchOrderFactorFilter) GetFactorName() string {
	if x != nil {
		return x.FactorName
	}
	return ""
}

func (x *TblDispatchOrderFactorFilter) GetType() uint64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TblDispatchOrderFactorFilter) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TblDispatchOrderFactorFilter) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TblDispatchOrderFactorFilter) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *TblDispatchOrderFactorFilter) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TblDispatchOrderFactorFilter) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TblDispatchOrderFactorFilter) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *TblDispatchOrderFactorFilter) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TblDispatchOrderFactorFilter) GetUpdatedBy() uint64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *TblDispatchOrderFactorFilter) GetIsDeleted() uint64 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

type TblDispatchOrderFactorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TblDispatchOrderFactor []*TblDispatchOrderFactor `protobuf:"bytes,1,rep,name=tblDispatchOrderFactor,proto3" json:"tblDispatchOrderFactor,omitempty"` // tblDispatchOrderFactorList
	TotalPage              int64                     `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                          //总页数
	Total                  int64                     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                  //总数据量
	PerPage                int32                     `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`                              //当前第几页
	PerSize                int32                     `protobuf:"varint,5,opt,name=perSize,proto3" json:"perSize,omitempty"`                              //每页数据量
	Count                  int32                     `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                  //当前页实际数量
}

func (x *TblDispatchOrderFactorList) Reset() {
	*x = TblDispatchOrderFactorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblDispatchOrderFactorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblDispatchOrderFactorList) ProtoMessage() {}

func (x *TblDispatchOrderFactorList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblDispatchOrderFactorList.ProtoReflect.Descriptor instead.
func (*TblDispatchOrderFactorList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{40}
}

func (x *TblDispatchOrderFactorList) GetTblDispatchOrderFactor() []*TblDispatchOrderFactor {
	if x != nil {
		return x.TblDispatchOrderFactor
	}
	return nil
}

func (x *TblDispatchOrderFactorList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *TblDispatchOrderFactorList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TblDispatchOrderFactorList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *TblDispatchOrderFactorList) GetPerSize() int32 {
	if x != nil {
		return x.PerSize
	}
	return 0
}

func (x *TblDispatchOrderFactorList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// --------------------------------商家派单规则限制表--------------------------------
type TblServerDistributeLimitRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id                uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                              //主键id
	Title             string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                         //自动化任务名称
	ServerId          uint64 `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`                  //商家id
	WeekConfig        string `protobuf:"bytes,4,opt,name=weekConfig,proto3" json:"weekConfig,omitempty"`               //星期配置
	LoopWay           uint64 `protobuf:"varint,5,opt,name=loopWay,proto3" json:"loopWay,omitempty"`                    //循环方式 1：单日循环，2：每日循环
	BusinessTimeRules string `protobuf:"bytes,6,opt,name=businessTimeRules,proto3" json:"businessTimeRules,omitempty"` //营业时间规则
	OrderNumConfig    string `protobuf:"bytes,7,opt,name=orderNumConfig,proto3" json:"orderNumConfig,omitempty"`       //意愿承接订单数/每日
	RuleStatus        uint64 `protobuf:"varint,8,opt,name=ruleStatus,proto3" json:"ruleStatus,omitempty"`              //任务状态 1：进行中，2：已结束
	TimeStart         uint64 `protobuf:"varint,9,opt,name=timeStart,proto3" json:"timeStart,omitempty"`                //开始时间
	TimeEnd           uint64 `protobuf:"varint,10,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`                   //结束时间
	CreatedAt         uint64 `protobuf:"varint,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`               //创建时间
	CreatedBy         uint64 `protobuf:"varint,12,opt,name=createdBy,proto3" json:"createdBy,omitempty"`               //创建人
	UpdatedAt         uint64 `protobuf:"varint,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`               //更新时间
	UpdatedBy         uint64 `protobuf:"varint,14,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`               //更新人
}

func (x *TblServerDistributeLimitRules) Reset() {
	*x = TblServerDistributeLimitRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblServerDistributeLimitRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblServerDistributeLimitRules) ProtoMessage() {}

func (x *TblServerDistributeLimitRules) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblServerDistributeLimitRules.ProtoReflect.Descriptor instead.
func (*TblServerDistributeLimitRules) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{41}
}

func (x *TblServerDistributeLimitRules) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TblServerDistributeLimitRules) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TblServerDistributeLimitRules) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *TblServerDistributeLimitRules) GetWeekConfig() string {
	if x != nil {
		return x.WeekConfig
	}
	return ""
}

func (x *TblServerDistributeLimitRules) GetLoopWay() uint64 {
	if x != nil {
		return x.LoopWay
	}
	return 0
}

func (x *TblServerDistributeLimitRules) GetBusinessTimeRules() string {
	if x != nil {
		return x.BusinessTimeRules
	}
	return ""
}

func (x *TblServerDistributeLimitRules) GetOrderNumConfig() string {
	if x != nil {
		return x.OrderNumConfig
	}
	return ""
}

func (x *TblServerDistributeLimitRules) GetRuleStatus() uint64 {
	if x != nil {
		return x.RuleStatus
	}
	return 0
}

func (x *TblServerDistributeLimitRules) GetTimeStart() uint64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *TblServerDistributeLimitRules) GetTimeEnd() uint64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *TblServerDistributeLimitRules) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TblServerDistributeLimitRules) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *TblServerDistributeLimitRules) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TblServerDistributeLimitRules) GetUpdatedBy() uint64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

type TblServerDistributeLimitRulesFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo            int64    `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`                       // pageNo
	PageSize          int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                   // pageSize
	SortField         []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`                  // sortField
	SortType          []string `protobuf:"bytes,4,rep,name=sortType,proto3" json:"sortType,omitempty"`                    // sortType
	GenTotal          bool     `protobuf:"varint,5,opt,name=genTotal,proto3" json:"genTotal,omitempty"`                   // genTotal
	Id                uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                               //主键id
	Title             string   `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`                          //自动化任务名称
	ServerId          uint64   `protobuf:"varint,8,opt,name=serverId,proto3" json:"serverId,omitempty"`                   //商家id
	WeekConfig        string   `protobuf:"bytes,9,opt,name=weekConfig,proto3" json:"weekConfig,omitempty"`                //星期配置
	LoopWay           uint64   `protobuf:"varint,10,opt,name=loopWay,proto3" json:"loopWay,omitempty"`                    //循环方式 1：单日循环，2：每日循环
	BusinessTimeRules string   `protobuf:"bytes,11,opt,name=businessTimeRules,proto3" json:"businessTimeRules,omitempty"` //营业时间规则
	OrderNumConfig    string   `protobuf:"bytes,12,opt,name=orderNumConfig,proto3" json:"orderNumConfig,omitempty"`       //意愿承接订单数/每日
	RuleStatus        uint64   `protobuf:"varint,13,opt,name=ruleStatus,proto3" json:"ruleStatus,omitempty"`              //任务状态 1：进行中，2：已结束
	TimeStart         uint64   `protobuf:"varint,14,opt,name=timeStart,proto3" json:"timeStart,omitempty"`                //开始时间
	TimeEnd           uint64   `protobuf:"varint,15,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`                    //结束时间
	CreatedAt         uint64   `protobuf:"varint,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                //创建时间
	CreatedBy         uint64   `protobuf:"varint,17,opt,name=createdBy,proto3" json:"createdBy,omitempty"`                //创建人
	UpdatedAt         uint64   `protobuf:"varint,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`                //更新时间
	UpdatedBy         uint64   `protobuf:"varint,19,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`                //更新人
}

func (x *TblServerDistributeLimitRulesFilter) Reset() {
	*x = TblServerDistributeLimitRulesFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblServerDistributeLimitRulesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblServerDistributeLimitRulesFilter) ProtoMessage() {}

func (x *TblServerDistributeLimitRulesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblServerDistributeLimitRulesFilter.ProtoReflect.Descriptor instead.
func (*TblServerDistributeLimitRulesFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{42}
}

func (x *TblServerDistributeLimitRulesFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TblServerDistributeLimitRulesFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TblServerDistributeLimitRulesFilter) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *TblServerDistributeLimitRulesFilter) GetSortType() []string {
	if x != nil {
		return x.SortType
	}
	return nil
}

func (x *TblServerDistributeLimitRulesFilter) GetGenTotal() bool {
	if x != nil {
		return x.GenTotal
	}
	return false
}

func (x *TblServerDistributeLimitRulesFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TblServerDistributeLimitRulesFilter) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TblServerDistributeLimitRulesFilter) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *TblServerDistributeLimitRulesFilter) GetWeekConfig() string {
	if x != nil {
		return x.WeekConfig
	}
	return ""
}

func (x *TblServerDistributeLimitRulesFilter) GetLoopWay() uint64 {
	if x != nil {
		return x.LoopWay
	}
	return 0
}

func (x *TblServerDistributeLimitRulesFilter) GetBusinessTimeRules() string {
	if x != nil {
		return x.BusinessTimeRules
	}
	return ""
}

func (x *TblServerDistributeLimitRulesFilter) GetOrderNumConfig() string {
	if x != nil {
		return x.OrderNumConfig
	}
	return ""
}

func (x *TblServerDistributeLimitRulesFilter) GetRuleStatus() uint64 {
	if x != nil {
		return x.RuleStatus
	}
	return 0
}

func (x *TblServerDistributeLimitRulesFilter) GetTimeStart() uint64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *TblServerDistributeLimitRulesFilter) GetTimeEnd() uint64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *TblServerDistributeLimitRulesFilter) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TblServerDistributeLimitRulesFilter) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *TblServerDistributeLimitRulesFilter) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TblServerDistributeLimitRulesFilter) GetUpdatedBy() uint64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

type TblServerDistributeLimitRulesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TblServerDistributeLimitRules []*TblServerDistributeLimitRules `protobuf:"bytes,1,rep,name=tblServerDistributeLimitRules,proto3" json:"tblServerDistributeLimitRules,omitempty"` // tblServerDistributeLimitRulesList
	TotalPage                     int64                            `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                                        //总页数
	Total                         int64                            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                                //总数据量
	PerPage                       int32                            `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`                                            //当前第几页
	PerSize                       int32                            `protobuf:"varint,5,opt,name=perSize,proto3" json:"perSize,omitempty"`                                            //每页数据量
	Count                         int32                            `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                                //当前页实际数量
}

func (x *TblServerDistributeLimitRulesList) Reset() {
	*x = TblServerDistributeLimitRulesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblServerDistributeLimitRulesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblServerDistributeLimitRulesList) ProtoMessage() {}

func (x *TblServerDistributeLimitRulesList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblServerDistributeLimitRulesList.ProtoReflect.Descriptor instead.
func (*TblServerDistributeLimitRulesList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{43}
}

func (x *TblServerDistributeLimitRulesList) GetTblServerDistributeLimitRules() []*TblServerDistributeLimitRules {
	if x != nil {
		return x.TblServerDistributeLimitRules
	}
	return nil
}

func (x *TblServerDistributeLimitRulesList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *TblServerDistributeLimitRulesList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TblServerDistributeLimitRulesList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *TblServerDistributeLimitRulesList) GetPerSize() int32 {
	if x != nil {
		return x.PerSize
	}
	return 0
}

func (x *TblServerDistributeLimitRulesList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// --------------------------------派单记录表--------------------------------
type DistributeOrderLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                           //主键ID
	OrderId         uint64 `protobuf:"varint,2,opt,name=orderId,proto3" json:"orderId,omitempty"`                 //订单ID
	ServerId        uint64 `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`               //商家ID
	ServerName      string `protobuf:"bytes,4,opt,name=serverName,proto3" json:"serverName,omitempty"`            //商家名称
	Status          uint64 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                   //状态；1-已接单、2-拒单
	ReceiveAt       uint64 `protobuf:"varint,6,opt,name=receiveAt,proto3" json:"receiveAt,omitempty"`             //接单时间
	RefuseAt        uint64 `protobuf:"varint,7,opt,name=refuseAt,proto3" json:"refuseAt,omitempty"`               //拒单时间
	CreatedUserId   uint64 `protobuf:"varint,8,opt,name=createdUserId,proto3" json:"createdUserId,omitempty"`     //创建用户ID
	CreatedUserName string `protobuf:"bytes,9,opt,name=createdUserName,proto3" json:"createdUserName,omitempty"`  //创建用户名称
	UpdatedUserId   uint64 `protobuf:"varint,10,opt,name=updatedUserId,proto3" json:"updatedUserId,omitempty"`    //修改用户ID
	UpdatedUserName string `protobuf:"bytes,11,opt,name=updatedUserName,proto3" json:"updatedUserName,omitempty"` //修改用户名称
	CreatedAt       uint64 `protobuf:"varint,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`            //创建时间
	UpdatedAt       uint64 `protobuf:"varint,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`            //修改时间
	RuleId          int64  `protobuf:"varint,14,opt,name=ruleId,proto3" json:"ruleId,omitempty"`                  //派单规则ID
	BtnStatus       uint64 `protobuf:"varint,15,opt,name=btnStatus,proto3" json:"btnStatus,omitempty"`            //商家是否接收派单按钮状态 0：默认，1：开启，2：关闭
	Version         uint64 `protobuf:"varint,16,opt,name=version,proto3" json:"version,omitempty"`                //版本 1:默认，2:派单限制
}

func (x *DistributeOrderLog) Reset() {
	*x = DistributeOrderLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributeOrderLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributeOrderLog) ProtoMessage() {}

func (x *DistributeOrderLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributeOrderLog.ProtoReflect.Descriptor instead.
func (*DistributeOrderLog) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{44}
}

func (x *DistributeOrderLog) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DistributeOrderLog) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *DistributeOrderLog) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *DistributeOrderLog) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *DistributeOrderLog) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DistributeOrderLog) GetReceiveAt() uint64 {
	if x != nil {
		return x.ReceiveAt
	}
	return 0
}

func (x *DistributeOrderLog) GetRefuseAt() uint64 {
	if x != nil {
		return x.RefuseAt
	}
	return 0
}

func (x *DistributeOrderLog) GetCreatedUserId() uint64 {
	if x != nil {
		return x.CreatedUserId
	}
	return 0
}

func (x *DistributeOrderLog) GetCreatedUserName() string {
	if x != nil {
		return x.CreatedUserName
	}
	return ""
}

func (x *DistributeOrderLog) GetUpdatedUserId() uint64 {
	if x != nil {
		return x.UpdatedUserId
	}
	return 0
}

func (x *DistributeOrderLog) GetUpdatedUserName() string {
	if x != nil {
		return x.UpdatedUserName
	}
	return ""
}

func (x *DistributeOrderLog) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DistributeOrderLog) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *DistributeOrderLog) GetRuleId() int64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *DistributeOrderLog) GetBtnStatus() uint64 {
	if x != nil {
		return x.BtnStatus
	}
	return 0
}

func (x *DistributeOrderLog) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DistributeOrderLogFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo          int64    `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`                   // pageNo
	PageSize        int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`               // pageSize
	SortField       []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`              // sortField
	SortType        []string `protobuf:"bytes,4,rep,name=sortType,proto3" json:"sortType,omitempty"`                // sortType
	GenTotal        bool     `protobuf:"varint,5,opt,name=genTotal,proto3" json:"genTotal,omitempty"`               // genTotal
	Id              uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                           //主键ID
	OrderId         uint64   `protobuf:"varint,7,opt,name=orderId,proto3" json:"orderId,omitempty"`                 //订单ID
	ServerId        uint64   `protobuf:"varint,8,opt,name=serverId,proto3" json:"serverId,omitempty"`               //商家ID
	ServerName      string   `protobuf:"bytes,9,opt,name=serverName,proto3" json:"serverName,omitempty"`            //商家名称
	Status          uint64   `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                  //状态；1-已接单、2-拒单
	ReceiveAt       uint64   `protobuf:"varint,11,opt,name=receiveAt,proto3" json:"receiveAt,omitempty"`            //接单时间
	RefuseAt        uint64   `protobuf:"varint,12,opt,name=refuseAt,proto3" json:"refuseAt,omitempty"`              //拒单时间
	CreatedUserId   uint64   `protobuf:"varint,13,opt,name=createdUserId,proto3" json:"createdUserId,omitempty"`    //创建用户ID
	CreatedUserName string   `protobuf:"bytes,14,opt,name=createdUserName,proto3" json:"createdUserName,omitempty"` //创建用户名称
	UpdatedUserId   uint64   `protobuf:"varint,15,opt,name=updatedUserId,proto3" json:"updatedUserId,omitempty"`    //修改用户ID
	UpdatedUserName string   `protobuf:"bytes,16,opt,name=updatedUserName,proto3" json:"updatedUserName,omitempty"` //修改用户名称
	CreatedAt       uint64   `protobuf:"varint,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`            //创建时间
	UpdatedAt       uint64   `protobuf:"varint,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`            //修改时间
	RuleId          int64    `protobuf:"varint,19,opt,name=ruleId,proto3" json:"ruleId,omitempty"`                  //派单规则ID
	BtnStatus       uint64   `protobuf:"varint,20,opt,name=btnStatus,proto3" json:"btnStatus,omitempty"`            //商家是否接收派单按钮状态 0：默认，1：开启，2：关闭
	Version         uint64   `protobuf:"varint,21,opt,name=version,proto3" json:"version,omitempty"`                //版本 1:默认，2:派单限制
}

func (x *DistributeOrderLogFilter) Reset() {
	*x = DistributeOrderLogFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributeOrderLogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributeOrderLogFilter) ProtoMessage() {}

func (x *DistributeOrderLogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributeOrderLogFilter.ProtoReflect.Descriptor instead.
func (*DistributeOrderLogFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{45}
}

func (x *DistributeOrderLogFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *DistributeOrderLogFilter) GetSortType() []string {
	if x != nil {
		return x.SortType
	}
	return nil
}

func (x *DistributeOrderLogFilter) GetGenTotal() bool {
	if x != nil {
		return x.GenTotal
	}
	return false
}

func (x *DistributeOrderLogFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *DistributeOrderLogFilter) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetReceiveAt() uint64 {
	if x != nil {
		return x.ReceiveAt
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetRefuseAt() uint64 {
	if x != nil {
		return x.RefuseAt
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetCreatedUserId() uint64 {
	if x != nil {
		return x.CreatedUserId
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetCreatedUserName() string {
	if x != nil {
		return x.CreatedUserName
	}
	return ""
}

func (x *DistributeOrderLogFilter) GetUpdatedUserId() uint64 {
	if x != nil {
		return x.UpdatedUserId
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetUpdatedUserName() string {
	if x != nil {
		return x.UpdatedUserName
	}
	return ""
}

func (x *DistributeOrderLogFilter) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetRuleId() int64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetBtnStatus() uint64 {
	if x != nil {
		return x.BtnStatus
	}
	return 0
}

func (x *DistributeOrderLogFilter) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DistributeOrderLogList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DistributeOrderLog []*DistributeOrderLog `protobuf:"bytes,1,rep,name=distributeOrderLog,proto3" json:"distributeOrderLog,omitempty"` // distributeOrderLogList
	TotalPage          int64                 `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                  //总页数
	Total              int64                 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                          //总数据量
	PerPage            int32                 `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`                      //当前第几页
	PerSize            int32                 `protobuf:"varint,5,opt,name=perSize,proto3" json:"perSize,omitempty"`                      //每页数据量
	Count              int32                 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                          //当前页实际数量
}

func (x *DistributeOrderLogList) Reset() {
	*x = DistributeOrderLogList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributeOrderLogList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributeOrderLogList) ProtoMessage() {}

func (x *DistributeOrderLogList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributeOrderLogList.ProtoReflect.Descriptor instead.
func (*DistributeOrderLogList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{46}
}

func (x *DistributeOrderLogList) GetDistributeOrderLog() []*DistributeOrderLog {
	if x != nil {
		return x.DistributeOrderLog
	}
	return nil
}

func (x *DistributeOrderLogList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *DistributeOrderLogList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DistributeOrderLogList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *DistributeOrderLogList) GetPerSize() int32 {
	if x != nil {
		return x.PerSize
	}
	return 0
}

func (x *DistributeOrderLogList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// --------------------------------派单商家流量池表--------------------------------
type TblDispatchServerFlowPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id               uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // ID
	ServerId         uint64 `protobuf:"varint,2,opt,name=serverId,proto3" json:"serverId,omitempty"`                 //商家ID
	Level            uint64 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`                       //商家等级
	InitLevel        uint64 `protobuf:"varint,4,opt,name=initLevel,proto3" json:"initLevel,omitempty"`               //初始等级
	CreatedDate      uint64 `protobuf:"varint,5,opt,name=createdDate,proto3" json:"createdDate,omitempty"`           //创建日期(年月日)
	CreatedAt        uint64 `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`               //创建时间
	UpdatedAt        uint64 `protobuf:"varint,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`               //更新时间
	IsColdBoot       uint64 `protobuf:"varint,8,opt,name=isColdBoot,proto3" json:"isColdBoot,omitempty"`             //是否冷启动
	CanDispatchCount uint64 `protobuf:"varint,9,opt,name=canDispatchCount,proto3" json:"canDispatchCount,omitempty"` //可派次数
}

func (x *TblDispatchServerFlowPool) Reset() {
	*x = TblDispatchServerFlowPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblDispatchServerFlowPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblDispatchServerFlowPool) ProtoMessage() {}

func (x *TblDispatchServerFlowPool) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblDispatchServerFlowPool.ProtoReflect.Descriptor instead.
func (*TblDispatchServerFlowPool) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{47}
}

func (x *TblDispatchServerFlowPool) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TblDispatchServerFlowPool) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *TblDispatchServerFlowPool) GetLevel() uint64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TblDispatchServerFlowPool) GetInitLevel() uint64 {
	if x != nil {
		return x.InitLevel
	}
	return 0
}

func (x *TblDispatchServerFlowPool) GetCreatedDate() uint64 {
	if x != nil {
		return x.CreatedDate
	}
	return 0
}

func (x *TblDispatchServerFlowPool) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TblDispatchServerFlowPool) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TblDispatchServerFlowPool) GetIsColdBoot() uint64 {
	if x != nil {
		return x.IsColdBoot
	}
	return 0
}

func (x *TblDispatchServerFlowPool) GetCanDispatchCount() uint64 {
	if x != nil {
		return x.CanDispatchCount
	}
	return 0
}

type TblDispatchServerFlowPoolFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo           int64    `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`                      // pageNo
	PageSize         int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                  // pageSize
	SortField        []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`                 // sortField
	SortType         []string `protobuf:"bytes,4,rep,name=sortType,proto3" json:"sortType,omitempty"`                   // sortType
	GenTotal         bool     `protobuf:"varint,5,opt,name=genTotal,proto3" json:"genTotal,omitempty"`                  // genTotal
	Id               uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                              // ID
	ServerId         uint64   `protobuf:"varint,7,opt,name=serverId,proto3" json:"serverId,omitempty"`                  //商家ID
	Level            uint64   `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`                        //商家等级
	InitLevel        uint64   `protobuf:"varint,9,opt,name=initLevel,proto3" json:"initLevel,omitempty"`                //初始等级
	CreatedDate      uint64   `protobuf:"varint,10,opt,name=createdDate,proto3" json:"createdDate,omitempty"`           //创建日期(年月日)
	CreatedAt        uint64   `protobuf:"varint,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`               //创建时间
	UpdatedAt        uint64   `protobuf:"varint,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`               //更新时间
	IsColdBoot       uint64   `protobuf:"varint,13,opt,name=isColdBoot,proto3" json:"isColdBoot,omitempty"`             //是否冷启动
	CanDispatchCount uint64   `protobuf:"varint,14,opt,name=canDispatchCount,proto3" json:"canDispatchCount,omitempty"` //可派次数
}

func (x *TblDispatchServerFlowPoolFilter) Reset() {
	*x = TblDispatchServerFlowPoolFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblDispatchServerFlowPoolFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblDispatchServerFlowPoolFilter) ProtoMessage() {}

func (x *TblDispatchServerFlowPoolFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblDispatchServerFlowPoolFilter.ProtoReflect.Descriptor instead.
func (*TblDispatchServerFlowPoolFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{48}
}

func (x *TblDispatchServerFlowPoolFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TblDispatchServerFlowPoolFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TblDispatchServerFlowPoolFilter) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *TblDispatchServerFlowPoolFilter) GetSortType() []string {
	if x != nil {
		return x.SortType
	}
	return nil
}

func (x *TblDispatchServerFlowPoolFilter) GetGenTotal() bool {
	if x != nil {
		return x.GenTotal
	}
	return false
}

func (x *TblDispatchServerFlowPoolFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TblDispatchServerFlowPoolFilter) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *TblDispatchServerFlowPoolFilter) GetLevel() uint64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TblDispatchServerFlowPoolFilter) GetInitLevel() uint64 {
	if x != nil {
		return x.InitLevel
	}
	return 0
}

func (x *TblDispatchServerFlowPoolFilter) GetCreatedDate() uint64 {
	if x != nil {
		return x.CreatedDate
	}
	return 0
}

func (x *TblDispatchServerFlowPoolFilter) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TblDispatchServerFlowPoolFilter) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TblDispatchServerFlowPoolFilter) GetIsColdBoot() uint64 {
	if x != nil {
		return x.IsColdBoot
	}
	return 0
}

func (x *TblDispatchServerFlowPoolFilter) GetCanDispatchCount() uint64 {
	if x != nil {
		return x.CanDispatchCount
	}
	return 0
}

type TblDispatchServerFlowPoolList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TblDispatchServerFlowPool []*TblDispatchServerFlowPool `protobuf:"bytes,1,rep,name=tblDispatchServerFlowPool,proto3" json:"tblDispatchServerFlowPool,omitempty"` // tblDispatchServerFlowPoolList
	TotalPage                 int64                        `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                                //总页数
	Total                     int64                        `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                        //总数据量
	PerPage                   int32                        `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`                                    //当前第几页
	PerSize                   int32                        `protobuf:"varint,5,opt,name=perSize,proto3" json:"perSize,omitempty"`                                    //每页数据量
	Count                     int32                        `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                        //当前页实际数量
}

func (x *TblDispatchServerFlowPoolList) Reset() {
	*x = TblDispatchServerFlowPoolList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TblDispatchServerFlowPoolList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TblDispatchServerFlowPoolList) ProtoMessage() {}

func (x *TblDispatchServerFlowPoolList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TblDispatchServerFlowPoolList.ProtoReflect.Descriptor instead.
func (*TblDispatchServerFlowPoolList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{49}
}

func (x *TblDispatchServerFlowPoolList) GetTblDispatchServerFlowPool() []*TblDispatchServerFlowPool {
	if x != nil {
		return x.TblDispatchServerFlowPool
	}
	return nil
}

func (x *TblDispatchServerFlowPoolList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *TblDispatchServerFlowPoolList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TblDispatchServerFlowPoolList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *TblDispatchServerFlowPoolList) GetPerSize() int32 {
	if x != nil {
		return x.PerSize
	}
	return 0
}

func (x *TblDispatchServerFlowPoolList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// --------------------------------自动化派单决策路径应用表--------------------------------
type AutoDispatchDecisionPathLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                    // ID
	Preference   uint64 `protobuf:"varint,2,opt,name=preference,proto3" json:"preference,omitempty"`    //优先级
	Status       uint64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`            //状态(1开启，2关闭)
	ApplyVersion string `protobuf:"bytes,4,opt,name=applyVersion,proto3" json:"applyVersion,omitempty"` //应用版本
	CreatedAt    uint64 `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`      //创建时间
	CreatedBy    uint64 `protobuf:"varint,6,opt,name=createdBy,proto3" json:"createdBy,omitempty"`      //创建人
	UpdatedAt    uint64 `protobuf:"varint,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`      //更新时间
	UpdatedBy    uint64 `protobuf:"varint,8,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`      //更新人
}

func (x *AutoDispatchDecisionPathLink) Reset() {
	*x = AutoDispatchDecisionPathLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionPathLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionPathLink) ProtoMessage() {}

func (x *AutoDispatchDecisionPathLink) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionPathLink.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionPathLink) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{50}
}

func (x *AutoDispatchDecisionPathLink) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AutoDispatchDecisionPathLink) GetPreference() uint64 {
	if x != nil {
		return x.Preference
	}
	return 0
}

func (x *AutoDispatchDecisionPathLink) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AutoDispatchDecisionPathLink) GetApplyVersion() string {
	if x != nil {
		return x.ApplyVersion
	}
	return ""
}

func (x *AutoDispatchDecisionPathLink) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AutoDispatchDecisionPathLink) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *AutoDispatchDecisionPathLink) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AutoDispatchDecisionPathLink) GetUpdatedBy() uint64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

type AutoDispatchDecisionPathLinkFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo       int64    `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`            // pageNo
	PageSize     int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`        // pageSize
	SortField    []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`       // sortField
	SortType     []string `protobuf:"bytes,4,rep,name=sortType,proto3" json:"sortType,omitempty"`         // sortType
	GenTotal     bool     `protobuf:"varint,5,opt,name=genTotal,proto3" json:"genTotal,omitempty"`        // genTotal
	Id           uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                    // ID
	Preference   uint64   `protobuf:"varint,7,opt,name=preference,proto3" json:"preference,omitempty"`    //优先级
	Status       uint64   `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`            //状态(1开启，2关闭)
	ApplyVersion string   `protobuf:"bytes,9,opt,name=applyVersion,proto3" json:"applyVersion,omitempty"` //应用版本
	CreatedAt    uint64   `protobuf:"varint,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`     //创建时间
	CreatedBy    uint64   `protobuf:"varint,11,opt,name=createdBy,proto3" json:"createdBy,omitempty"`     //创建人
	UpdatedAt    uint64   `protobuf:"varint,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`     //更新时间
	UpdatedBy    uint64   `protobuf:"varint,13,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`     //更新人
}

func (x *AutoDispatchDecisionPathLinkFilter) Reset() {
	*x = AutoDispatchDecisionPathLinkFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionPathLinkFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionPathLinkFilter) ProtoMessage() {}

func (x *AutoDispatchDecisionPathLinkFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionPathLinkFilter.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionPathLinkFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{51}
}

func (x *AutoDispatchDecisionPathLinkFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkFilter) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *AutoDispatchDecisionPathLinkFilter) GetSortType() []string {
	if x != nil {
		return x.SortType
	}
	return nil
}

func (x *AutoDispatchDecisionPathLinkFilter) GetGenTotal() bool {
	if x != nil {
		return x.GenTotal
	}
	return false
}

func (x *AutoDispatchDecisionPathLinkFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkFilter) GetPreference() uint64 {
	if x != nil {
		return x.Preference
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkFilter) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkFilter) GetApplyVersion() string {
	if x != nil {
		return x.ApplyVersion
	}
	return ""
}

func (x *AutoDispatchDecisionPathLinkFilter) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkFilter) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkFilter) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkFilter) GetUpdatedBy() uint64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

type AutoDispatchDecisionPathLinkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoDispatchDecisionPathLink []*AutoDispatchDecisionPathLink `protobuf:"bytes,1,rep,name=autoDispatchDecisionPathLink,proto3" json:"autoDispatchDecisionPathLink,omitempty"` // autoDispatchDecisionPathLinkList
	TotalPage                    int64                           `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                                      //总页数
	Total                        int64                           `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                              //总数据量
	PerPage                      int32                           `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`                                          //当前第几页
	PerSize                      int32                           `protobuf:"varint,5,opt,name=perSize,proto3" json:"perSize,omitempty"`                                          //每页数据量
	Count                        int32                           `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                              //当前页实际数量
}

func (x *AutoDispatchDecisionPathLinkList) Reset() {
	*x = AutoDispatchDecisionPathLinkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionPathLinkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionPathLinkList) ProtoMessage() {}

func (x *AutoDispatchDecisionPathLinkList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionPathLinkList.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionPathLinkList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{52}
}

func (x *AutoDispatchDecisionPathLinkList) GetAutoDispatchDecisionPathLink() []*AutoDispatchDecisionPathLink {
	if x != nil {
		return x.AutoDispatchDecisionPathLink
	}
	return nil
}

func (x *AutoDispatchDecisionPathLinkList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkList) GetPerSize() int32 {
	if x != nil {
		return x.PerSize
	}
	return 0
}

func (x *AutoDispatchDecisionPathLinkList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// --------------------------------自动派单配置日志表--------------------------------
type AutoDispatchConfigLogNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                  // id
	ConfigData  string `protobuf:"bytes,2,opt,name=configData,proto3" json:"configData,omitempty"`   //配置内容
	Type        int64  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`              //类型：6基础设置,7分仓配置
	CreatedAt   int64  `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`    //创建时间
	CreatedBy   int64  `protobuf:"varint,5,opt,name=createdBy,proto3" json:"createdBy,omitempty"`    //创建人ID
	CreatedName string `protobuf:"bytes,6,opt,name=createdName,proto3" json:"createdName,omitempty"` //创建人名
	EditModules string `protobuf:"bytes,7,opt,name=editModules,proto3" json:"editModules,omitempty"` //修改模块
	EditReason  string `protobuf:"bytes,8,opt,name=editReason,proto3" json:"editReason,omitempty"`   //修改原因
}

func (x *AutoDispatchConfigLogNew) Reset() {
	*x = AutoDispatchConfigLogNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchConfigLogNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchConfigLogNew) ProtoMessage() {}

func (x *AutoDispatchConfigLogNew) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchConfigLogNew.ProtoReflect.Descriptor instead.
func (*AutoDispatchConfigLogNew) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{53}
}

func (x *AutoDispatchConfigLogNew) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AutoDispatchConfigLogNew) GetConfigData() string {
	if x != nil {
		return x.ConfigData
	}
	return ""
}

func (x *AutoDispatchConfigLogNew) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AutoDispatchConfigLogNew) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AutoDispatchConfigLogNew) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *AutoDispatchConfigLogNew) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *AutoDispatchConfigLogNew) GetEditModules() string {
	if x != nil {
		return x.EditModules
	}
	return ""
}

func (x *AutoDispatchConfigLogNew) GetEditReason() string {
	if x != nil {
		return x.EditReason
	}
	return ""
}

type AutoDispatchConfigLogNewFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo      int64    `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`           // pageNo
	PageSize    int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`       // pageSize
	SortField   []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`      // sortField
	SortType    []string `protobuf:"bytes,4,rep,name=sortType,proto3" json:"sortType,omitempty"`        // sortType
	GenTotal    bool     `protobuf:"varint,5,opt,name=genTotal,proto3" json:"genTotal,omitempty"`       // genTotal
	Id          uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                   // id
	ConfigData  string   `protobuf:"bytes,7,opt,name=configData,proto3" json:"configData,omitempty"`    //配置内容
	Type        int64    `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`               //类型：6基础设置,7分仓配置
	CreatedAt   int64    `protobuf:"varint,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`     //创建时间
	CreatedBy   int64    `protobuf:"varint,10,opt,name=createdBy,proto3" json:"createdBy,omitempty"`    //创建人ID
	CreatedName string   `protobuf:"bytes,11,opt,name=createdName,proto3" json:"createdName,omitempty"` //创建人名
	EditModules string   `protobuf:"bytes,12,opt,name=editModules,proto3" json:"editModules,omitempty"` //修改模块
	EditReason  string   `protobuf:"bytes,13,opt,name=editReason,proto3" json:"editReason,omitempty"`   //修改原因
}

func (x *AutoDispatchConfigLogNewFilter) Reset() {
	*x = AutoDispatchConfigLogNewFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchConfigLogNewFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchConfigLogNewFilter) ProtoMessage() {}

func (x *AutoDispatchConfigLogNewFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchConfigLogNewFilter.ProtoReflect.Descriptor instead.
func (*AutoDispatchConfigLogNewFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{54}
}

func (x *AutoDispatchConfigLogNewFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AutoDispatchConfigLogNewFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AutoDispatchConfigLogNewFilter) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *AutoDispatchConfigLogNewFilter) GetSortType() []string {
	if x != nil {
		return x.SortType
	}
	return nil
}

func (x *AutoDispatchConfigLogNewFilter) GetGenTotal() bool {
	if x != nil {
		return x.GenTotal
	}
	return false
}

func (x *AutoDispatchConfigLogNewFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AutoDispatchConfigLogNewFilter) GetConfigData() string {
	if x != nil {
		return x.ConfigData
	}
	return ""
}

func (x *AutoDispatchConfigLogNewFilter) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AutoDispatchConfigLogNewFilter) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AutoDispatchConfigLogNewFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *AutoDispatchConfigLogNewFilter) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *AutoDispatchConfigLogNewFilter) GetEditModules() string {
	if x != nil {
		return x.EditModules
	}
	return ""
}

func (x *AutoDispatchConfigLogNewFilter) GetEditReason() string {
	if x != nil {
		return x.EditReason
	}
	return ""
}

type AutoDispatchConfigLogNewList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoDispatchConfigLogNew []*AutoDispatchConfigLogNew `protobuf:"bytes,1,rep,name=autoDispatchConfigLogNew,proto3" json:"autoDispatchConfigLogNew,omitempty"` // autoDispatchConfigLogNewList
	TotalPage                int64                       `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                              //总页数
	Total                    int64                       `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                      //总数据量
	PerPage                  int32                       `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`                                  //当前第几页
	PerSize                  int32                       `protobuf:"varint,5,opt,name=perSize,proto3" json:"perSize,omitempty"`                                  //每页数据量
	Count                    int32                       `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                      //当前页实际数量
}

func (x *AutoDispatchConfigLogNewList) Reset() {
	*x = AutoDispatchConfigLogNewList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchConfigLogNewList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchConfigLogNewList) ProtoMessage() {}

func (x *AutoDispatchConfigLogNewList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchConfigLogNewList.ProtoReflect.Descriptor instead.
func (*AutoDispatchConfigLogNewList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{55}
}

func (x *AutoDispatchConfigLogNewList) GetAutoDispatchConfigLogNew() []*AutoDispatchConfigLogNew {
	if x != nil {
		return x.AutoDispatchConfigLogNew
	}
	return nil
}

func (x *AutoDispatchConfigLogNewList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AutoDispatchConfigLogNewList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AutoDispatchConfigLogNewList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *AutoDispatchConfigLogNewList) GetPerSize() int32 {
	if x != nil {
		return x.PerSize
	}
	return 0
}

func (x *AutoDispatchConfigLogNewList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// --------------------------------自动化派单规则表--------------------------------
type AutoDispatchDecisionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                      // ID
	Pid           int64  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`                    //父级ID(关联auto_dispatch_decision_path的id)
	SelectServer  string `protobuf:"bytes,3,opt,name=selectServer,proto3" json:"selectServer,omitempty"`   //圈选商家
	ActionExecute string `protobuf:"bytes,4,opt,name=actionExecute,proto3" json:"actionExecute,omitempty"` //执行动作
	CreatedAt     uint64 `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`        //创建时间
	CreatedBy     uint64 `protobuf:"varint,6,opt,name=createdBy,proto3" json:"createdBy,omitempty"`        //创建人
}

func (x *AutoDispatchDecisionRule) Reset() {
	*x = AutoDispatchDecisionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionRule) ProtoMessage() {}

func (x *AutoDispatchDecisionRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionRule.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionRule) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{56}
}

func (x *AutoDispatchDecisionRule) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AutoDispatchDecisionRule) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *AutoDispatchDecisionRule) GetSelectServer() string {
	if x != nil {
		return x.SelectServer
	}
	return ""
}

func (x *AutoDispatchDecisionRule) GetActionExecute() string {
	if x != nil {
		return x.ActionExecute
	}
	return ""
}

func (x *AutoDispatchDecisionRule) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AutoDispatchDecisionRule) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

type AutoDispatchDecisionRuleFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo        int64    `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`              // pageNo
	PageSize      int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`          // pageSize
	SortField     []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`         // sortField
	SortType      []string `protobuf:"bytes,4,rep,name=sortType,proto3" json:"sortType,omitempty"`           // sortType
	GenTotal      bool     `protobuf:"varint,5,opt,name=genTotal,proto3" json:"genTotal,omitempty"`          // genTotal
	Id            uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                      // ID
	Pid           int64    `protobuf:"varint,7,opt,name=pid,proto3" json:"pid,omitempty"`                    //父级ID(关联auto_dispatch_decision_path的id)
	SelectServer  string   `protobuf:"bytes,8,opt,name=selectServer,proto3" json:"selectServer,omitempty"`   //圈选商家
	ActionExecute string   `protobuf:"bytes,9,opt,name=actionExecute,proto3" json:"actionExecute,omitempty"` //执行动作
	CreatedAt     uint64   `protobuf:"varint,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`       //创建时间
	CreatedBy     uint64   `protobuf:"varint,11,opt,name=createdBy,proto3" json:"createdBy,omitempty"`       //创建人
}

func (x *AutoDispatchDecisionRuleFilter) Reset() {
	*x = AutoDispatchDecisionRuleFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionRuleFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionRuleFilter) ProtoMessage() {}

func (x *AutoDispatchDecisionRuleFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionRuleFilter.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionRuleFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{57}
}

func (x *AutoDispatchDecisionRuleFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AutoDispatchDecisionRuleFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AutoDispatchDecisionRuleFilter) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *AutoDispatchDecisionRuleFilter) GetSortType() []string {
	if x != nil {
		return x.SortType
	}
	return nil
}

func (x *AutoDispatchDecisionRuleFilter) GetGenTotal() bool {
	if x != nil {
		return x.GenTotal
	}
	return false
}

func (x *AutoDispatchDecisionRuleFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AutoDispatchDecisionRuleFilter) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *AutoDispatchDecisionRuleFilter) GetSelectServer() string {
	if x != nil {
		return x.SelectServer
	}
	return ""
}

func (x *AutoDispatchDecisionRuleFilter) GetActionExecute() string {
	if x != nil {
		return x.ActionExecute
	}
	return ""
}

func (x *AutoDispatchDecisionRuleFilter) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AutoDispatchDecisionRuleFilter) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

type AutoDispatchDecisionRuleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoDispatchDecisionRule []*AutoDispatchDecisionRule `protobuf:"bytes,1,rep,name=autoDispatchDecisionRule,proto3" json:"autoDispatchDecisionRule,omitempty"` // autoDispatchDecisionRuleList
	TotalPage                int64                       `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                              //总页数
	Total                    int64                       `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                      //总数据量
	PerPage                  int32                       `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`                                  //当前第几页
	PerSize                  int32                       `protobuf:"varint,5,opt,name=perSize,proto3" json:"perSize,omitempty"`                                  //每页数据量
	Count                    int32                       `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                      //当前页实际数量
}

func (x *AutoDispatchDecisionRuleList) Reset() {
	*x = AutoDispatchDecisionRuleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionRuleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionRuleList) ProtoMessage() {}

func (x *AutoDispatchDecisionRuleList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionRuleList.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionRuleList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{58}
}

func (x *AutoDispatchDecisionRuleList) GetAutoDispatchDecisionRule() []*AutoDispatchDecisionRule {
	if x != nil {
		return x.AutoDispatchDecisionRule
	}
	return nil
}

func (x *AutoDispatchDecisionRuleList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AutoDispatchDecisionRuleList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AutoDispatchDecisionRuleList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *AutoDispatchDecisionRuleList) GetPerSize() int32 {
	if x != nil {
		return x.PerSize
	}
	return 0
}

func (x *AutoDispatchDecisionRuleList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// --------------------------------自动化派单决策路径订单表--------------------------------
type AutoDispatchDecisionPathOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               // ID
	OrderId   uint64 `protobuf:"varint,2,opt,name=orderId,proto3" json:"orderId,omitempty"`     //订单号
	LinkId    uint64 `protobuf:"varint,3,opt,name=linkId,proto3" json:"linkId,omitempty"`       // auto_dispatch_decision_path_link表ID
	CreatedAt uint64 `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"` //创建时间
	ServerId  uint64 `protobuf:"varint,5,opt,name=serverId,proto3" json:"serverId,omitempty"`   //商家ID
	PathId    uint64 `protobuf:"varint,6,opt,name=pathId,proto3" json:"pathId,omitempty"`       //路径ID
	RuleId    uint64 `protobuf:"varint,7,opt,name=ruleId,proto3" json:"ruleId,omitempty"`       //规则ID
}

func (x *AutoDispatchDecisionPathOrder) Reset() {
	*x = AutoDispatchDecisionPathOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionPathOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionPathOrder) ProtoMessage() {}

func (x *AutoDispatchDecisionPathOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionPathOrder.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionPathOrder) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{59}
}

func (x *AutoDispatchDecisionPathOrder) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrder) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrder) GetLinkId() uint64 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrder) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrder) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrder) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrder) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

type AutoDispatchDecisionPathOrderFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo    int64    `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`       // pageNo
	PageSize  int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`   // pageSize
	SortField []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`  // sortField
	SortType  []string `protobuf:"bytes,4,rep,name=sortType,proto3" json:"sortType,omitempty"`    // sortType
	GenTotal  bool     `protobuf:"varint,5,opt,name=genTotal,proto3" json:"genTotal,omitempty"`   // genTotal
	Id        uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`               // ID
	OrderId   uint64   `protobuf:"varint,7,opt,name=orderId,proto3" json:"orderId,omitempty"`     //订单号
	LinkId    uint64   `protobuf:"varint,8,opt,name=linkId,proto3" json:"linkId,omitempty"`       // auto_dispatch_decision_path_link表ID
	CreatedAt uint64   `protobuf:"varint,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"` //创建时间
	ServerId  uint64   `protobuf:"varint,10,opt,name=serverId,proto3" json:"serverId,omitempty"`  //商家ID
	PathId    uint64   `protobuf:"varint,11,opt,name=pathId,proto3" json:"pathId,omitempty"`      //路径ID
	RuleId    uint64   `protobuf:"varint,12,opt,name=ruleId,proto3" json:"ruleId,omitempty"`      //规则ID
}

func (x *AutoDispatchDecisionPathOrderFilter) Reset() {
	*x = AutoDispatchDecisionPathOrderFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionPathOrderFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionPathOrderFilter) ProtoMessage() {}

func (x *AutoDispatchDecisionPathOrderFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionPathOrderFilter.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionPathOrderFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{60}
}

func (x *AutoDispatchDecisionPathOrderFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderFilter) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *AutoDispatchDecisionPathOrderFilter) GetSortType() []string {
	if x != nil {
		return x.SortType
	}
	return nil
}

func (x *AutoDispatchDecisionPathOrderFilter) GetGenTotal() bool {
	if x != nil {
		return x.GenTotal
	}
	return false
}

func (x *AutoDispatchDecisionPathOrderFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderFilter) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderFilter) GetLinkId() uint64 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderFilter) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderFilter) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderFilter) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderFilter) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

type AutoDispatchDecisionPathOrderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoDispatchDecisionPathOrder []*AutoDispatchDecisionPathOrder `protobuf:"bytes,1,rep,name=autoDispatchDecisionPathOrder,proto3" json:"autoDispatchDecisionPathOrder,omitempty"` // autoDispatchDecisionPathOrderList
	TotalPage                     int64                            `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                                        //总页数
	Total                         int64                            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                                //总数据量
	PerPage                       int32                            `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`                                            //当前第几页
	PerSize                       int32                            `protobuf:"varint,5,opt,name=perSize,proto3" json:"perSize,omitempty"`                                            //每页数据量
	Count                         int32                            `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                                //当前页实际数量
}

func (x *AutoDispatchDecisionPathOrderList) Reset() {
	*x = AutoDispatchDecisionPathOrderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDispatchDecisionPathOrderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDispatchDecisionPathOrderList) ProtoMessage() {}

func (x *AutoDispatchDecisionPathOrderList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDispatchDecisionPathOrderList.ProtoReflect.Descriptor instead.
func (*AutoDispatchDecisionPathOrderList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{61}
}

func (x *AutoDispatchDecisionPathOrderList) GetAutoDispatchDecisionPathOrder() []*AutoDispatchDecisionPathOrder {
	if x != nil {
		return x.AutoDispatchDecisionPathOrder
	}
	return nil
}

func (x *AutoDispatchDecisionPathOrderList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderList) GetPerSize() int32 {
	if x != nil {
		return x.PerSize
	}
	return 0
}

func (x *AutoDispatchDecisionPathOrderList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// --------------------------------dwdDistributeValidOrderView--------------------------------
type DwdDistributeValidOrderView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id                  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // ID
	OrderId             uint64 `protobuf:"varint,2,opt,name=orderId,proto3" json:"orderId,omitempty"`                         //订单号
	DisServerId         uint64 `protobuf:"varint,3,opt,name=disServerId,proto3" json:"disServerId,omitempty"`                 //派发商家ID
	NoHandledSign       uint64 `protobuf:"varint,4,opt,name=noHandledSign,proto3" json:"noHandledSign,omitempty"`             //未处理标记
	DistributeOrderSign uint64 `protobuf:"varint,5,opt,name=distributeOrderSign,proto3" json:"distributeOrderSign,omitempty"` //派单订单标记
	DisCreatedAt        uint64 `protobuf:"varint,6,opt,name=disCreatedAt,proto3" json:"disCreatedAt,omitempty"`               //派单时间
	SpuModelId          uint64 `protobuf:"varint,7,opt,name=spuModelId,proto3" json:"spuModelId,omitempty"`                   //机型ID
	GoodsType           uint64 `protobuf:"varint,8,opt,name=goodsType,proto3" json:"goodsType,omitempty"`                     //成新度
	BrandId             uint64 `protobuf:"varint,9,opt,name=brandId,proto3" json:"brandId,omitempty"`                         //品牌ID
}

func (x *DwdDistributeValidOrderView) Reset() {
	*x = DwdDistributeValidOrderView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DwdDistributeValidOrderView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DwdDistributeValidOrderView) ProtoMessage() {}

func (x *DwdDistributeValidOrderView) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DwdDistributeValidOrderView.ProtoReflect.Descriptor instead.
func (*DwdDistributeValidOrderView) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{62}
}

func (x *DwdDistributeValidOrderView) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DwdDistributeValidOrderView) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *DwdDistributeValidOrderView) GetDisServerId() uint64 {
	if x != nil {
		return x.DisServerId
	}
	return 0
}

func (x *DwdDistributeValidOrderView) GetNoHandledSign() uint64 {
	if x != nil {
		return x.NoHandledSign
	}
	return 0
}

func (x *DwdDistributeValidOrderView) GetDistributeOrderSign() uint64 {
	if x != nil {
		return x.DistributeOrderSign
	}
	return 0
}

func (x *DwdDistributeValidOrderView) GetDisCreatedAt() uint64 {
	if x != nil {
		return x.DisCreatedAt
	}
	return 0
}

func (x *DwdDistributeValidOrderView) GetSpuModelId() uint64 {
	if x != nil {
		return x.SpuModelId
	}
	return 0
}

func (x *DwdDistributeValidOrderView) GetGoodsType() uint64 {
	if x != nil {
		return x.GoodsType
	}
	return 0
}

func (x *DwdDistributeValidOrderView) GetBrandId() uint64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

type DwdDistributeValidOrderViewFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo              int64    `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`                            // pageNo
	PageSize            int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                        // pageSize
	SortField           []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`                       // sortField
	SortType            []string `protobuf:"bytes,4,rep,name=sortType,proto3" json:"sortType,omitempty"`                         // sortType
	GenTotal            bool     `protobuf:"varint,5,opt,name=genTotal,proto3" json:"genTotal,omitempty"`                        // genTotal
	Id                  uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                                    // ID
	OrderId             uint64   `protobuf:"varint,7,opt,name=orderId,proto3" json:"orderId,omitempty"`                          //订单号
	DisServerId         uint64   `protobuf:"varint,8,opt,name=disServerId,proto3" json:"disServerId,omitempty"`                  //派发商家ID
	NoHandledSign       uint64   `protobuf:"varint,9,opt,name=noHandledSign,proto3" json:"noHandledSign,omitempty"`              //未处理标记
	DistributeOrderSign uint64   `protobuf:"varint,10,opt,name=distributeOrderSign,proto3" json:"distributeOrderSign,omitempty"` //派单订单标记
	DisCreatedAt        uint64   `protobuf:"varint,11,opt,name=disCreatedAt,proto3" json:"disCreatedAt,omitempty"`               //派单时间
	SpuModelId          uint64   `protobuf:"varint,12,opt,name=spuModelId,proto3" json:"spuModelId,omitempty"`                   //机型ID
	GoodsType           uint64   `protobuf:"varint,13,opt,name=goodsType,proto3" json:"goodsType,omitempty"`                     //成新度
	BrandId             uint64   `protobuf:"varint,14,opt,name=brandId,proto3" json:"brandId,omitempty"`                         //品牌ID
}

func (x *DwdDistributeValidOrderViewFilter) Reset() {
	*x = DwdDistributeValidOrderViewFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DwdDistributeValidOrderViewFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DwdDistributeValidOrderViewFilter) ProtoMessage() {}

func (x *DwdDistributeValidOrderViewFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DwdDistributeValidOrderViewFilter.ProtoReflect.Descriptor instead.
func (*DwdDistributeValidOrderViewFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{63}
}

func (x *DwdDistributeValidOrderViewFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *DwdDistributeValidOrderViewFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DwdDistributeValidOrderViewFilter) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *DwdDistributeValidOrderViewFilter) GetSortType() []string {
	if x != nil {
		return x.SortType
	}
	return nil
}

func (x *DwdDistributeValidOrderViewFilter) GetGenTotal() bool {
	if x != nil {
		return x.GenTotal
	}
	return false
}

func (x *DwdDistributeValidOrderViewFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DwdDistributeValidOrderViewFilter) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *DwdDistributeValidOrderViewFilter) GetDisServerId() uint64 {
	if x != nil {
		return x.DisServerId
	}
	return 0
}

func (x *DwdDistributeValidOrderViewFilter) GetNoHandledSign() uint64 {
	if x != nil {
		return x.NoHandledSign
	}
	return 0
}

func (x *DwdDistributeValidOrderViewFilter) GetDistributeOrderSign() uint64 {
	if x != nil {
		return x.DistributeOrderSign
	}
	return 0
}

func (x *DwdDistributeValidOrderViewFilter) GetDisCreatedAt() uint64 {
	if x != nil {
		return x.DisCreatedAt
	}
	return 0
}

func (x *DwdDistributeValidOrderViewFilter) GetSpuModelId() uint64 {
	if x != nil {
		return x.SpuModelId
	}
	return 0
}

func (x *DwdDistributeValidOrderViewFilter) GetGoodsType() uint64 {
	if x != nil {
		return x.GoodsType
	}
	return 0
}

func (x *DwdDistributeValidOrderViewFilter) GetBrandId() uint64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

type DwdDistributeValidOrderViewList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwdDistributeValidOrderView []*DwdDistributeValidOrderView `protobuf:"bytes,1,rep,name=dwdDistributeValidOrderView,proto3" json:"dwdDistributeValidOrderView,omitempty"` // dwdDistributeValidOrderViewList
	TotalPage                   int64                          `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                                    //总页数
	Total                       int64                          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                            //总数据量
	PerPage                     int32                          `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`                                        //当前第几页
	PerSize                     int32                          `protobuf:"varint,5,opt,name=perSize,proto3" json:"perSize,omitempty"`                                        //每页数据量
	Count                       int32                          `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                            //当前页实际数量
}

func (x *DwdDistributeValidOrderViewList) Reset() {
	*x = DwdDistributeValidOrderViewList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DwdDistributeValidOrderViewList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DwdDistributeValidOrderViewList) ProtoMessage() {}

func (x *DwdDistributeValidOrderViewList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DwdDistributeValidOrderViewList.ProtoReflect.Descriptor instead.
func (*DwdDistributeValidOrderViewList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{64}
}

func (x *DwdDistributeValidOrderViewList) GetDwdDistributeValidOrderView() []*DwdDistributeValidOrderView {
	if x != nil {
		return x.DwdDistributeValidOrderView
	}
	return nil
}

func (x *DwdDistributeValidOrderViewList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *DwdDistributeValidOrderViewList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DwdDistributeValidOrderViewList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *DwdDistributeValidOrderViewList) GetPerSize() int32 {
	if x != nil {
		return x.PerSize
	}
	return 0
}

func (x *DwdDistributeValidOrderViewList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// --------------------------------定向派单-派单商家--------------------------------
type DirectedDispatchServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT !!!
	Id                   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      // id
	Pid                  int64  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`                                    // directed_dispatch_server_tag表主键
	ServerId             int64  `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`                          //商家ID
	ServerName           string `protobuf:"bytes,4,opt,name=serverName,proto3" json:"serverName,omitempty"`                       //商家名称
	ServerLevel          int64  `protobuf:"varint,5,opt,name=serverLevel,proto3" json:"serverLevel,omitempty"`                    //商家等级
	ServerLevelName      string `protobuf:"bytes,6,opt,name=serverLevelName,proto3" json:"serverLevelName,omitempty"`             //商家等级名称
	SevenTwoDeliveryRate string `protobuf:"bytes,7,opt,name=sevenTwoDeliveryRate,proto3" json:"sevenTwoDeliveryRate,omitempty"`   //最近7-2天发货率
	TwoDeliveryRate      string `protobuf:"bytes,8,opt,name=twoDeliveryRate,proto3" json:"twoDeliveryRate,omitempty"`             //最近2天发货率
	DeliveryRate         string `protobuf:"bytes,9,opt,name=deliveryRate,proto3" json:"deliveryRate,omitempty"`                   //派单总发货率
	SevenTwoOrderCount   int64  `protobuf:"varint,10,opt,name=sevenTwoOrderCount,proto3" json:"sevenTwoOrderCount,omitempty"`     //最近7-2天订单量
	CreatedAt            int64  `protobuf:"varint,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                       //创建时间
	ThreeOneDeliveryRate string `protobuf:"bytes,12,opt,name=threeOneDeliveryRate,proto3" json:"threeOneDeliveryRate,omitempty"`  //最近3-1天发货率
	ThreeOneOrderCount   int64  `protobuf:"varint,13,opt,name=threeOneOrderCount,proto3" json:"threeOneOrderCount,omitempty"`     //最近3-1天订单量
	ServerCanDeliveryNum uint64 `protobuf:"varint,14,opt,name=serverCanDeliveryNum,proto3" json:"serverCanDeliveryNum,omitempty"` //可发货订单
	ServerIsDeliveryNum  uint64 `protobuf:"varint,15,opt,name=serverIsDeliveryNum,proto3" json:"serverIsDeliveryNum,omitempty"`   //已发货订单
	OrderDeliveryRate    string `protobuf:"bytes,16,opt,name=orderDeliveryRate,proto3" json:"orderDeliveryRate,omitempty"`        //发货率
	PendingOrderNum      uint64 `protobuf:"varint,17,opt,name=pendingOrderNum,proto3" json:"pendingOrderNum,omitempty"`           //未响应订单量
}

func (x *DirectedDispatchServer) Reset() {
	*x = DirectedDispatchServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectedDispatchServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectedDispatchServer) ProtoMessage() {}

func (x *DirectedDispatchServer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectedDispatchServer.ProtoReflect.Descriptor instead.
func (*DirectedDispatchServer) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{65}
}

func (x *DirectedDispatchServer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DirectedDispatchServer) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DirectedDispatchServer) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *DirectedDispatchServer) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *DirectedDispatchServer) GetServerLevel() int64 {
	if x != nil {
		return x.ServerLevel
	}
	return 0
}

func (x *DirectedDispatchServer) GetServerLevelName() string {
	if x != nil {
		return x.ServerLevelName
	}
	return ""
}

func (x *DirectedDispatchServer) GetSevenTwoDeliveryRate() string {
	if x != nil {
		return x.SevenTwoDeliveryRate
	}
	return ""
}

func (x *DirectedDispatchServer) GetTwoDeliveryRate() string {
	if x != nil {
		return x.TwoDeliveryRate
	}
	return ""
}

func (x *DirectedDispatchServer) GetDeliveryRate() string {
	if x != nil {
		return x.DeliveryRate
	}
	return ""
}

func (x *DirectedDispatchServer) GetSevenTwoOrderCount() int64 {
	if x != nil {
		return x.SevenTwoOrderCount
	}
	return 0
}

func (x *DirectedDispatchServer) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DirectedDispatchServer) GetThreeOneDeliveryRate() string {
	if x != nil {
		return x.ThreeOneDeliveryRate
	}
	return ""
}

func (x *DirectedDispatchServer) GetThreeOneOrderCount() int64 {
	if x != nil {
		return x.ThreeOneOrderCount
	}
	return 0
}

func (x *DirectedDispatchServer) GetServerCanDeliveryNum() uint64 {
	if x != nil {
		return x.ServerCanDeliveryNum
	}
	return 0
}

func (x *DirectedDispatchServer) GetServerIsDeliveryNum() uint64 {
	if x != nil {
		return x.ServerIsDeliveryNum
	}
	return 0
}

func (x *DirectedDispatchServer) GetOrderDeliveryRate() string {
	if x != nil {
		return x.OrderDeliveryRate
	}
	return ""
}

func (x *DirectedDispatchServer) GetPendingOrderNum() uint64 {
	if x != nil {
		return x.PendingOrderNum
	}
	return 0
}

type DirectedDispatchServerFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database Tag Begin. DO NOT EDIT!!!
	PageNo               int64    `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`                              // pageNo
	PageSize             int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                          // pageSize
	SortField            []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`                         // sortField
	SortType             []string `protobuf:"bytes,4,rep,name=sortType,proto3" json:"sortType,omitempty"`                           // sortType
	GenTotal             bool     `protobuf:"varint,5,opt,name=genTotal,proto3" json:"genTotal,omitempty"`                          // genTotal
	Id                   uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                                      // id
	Pid                  int64    `protobuf:"varint,7,opt,name=pid,proto3" json:"pid,omitempty"`                                    // directed_dispatch_server_tag表主键
	ServerId             int64    `protobuf:"varint,8,opt,name=serverId,proto3" json:"serverId,omitempty"`                          //商家ID
	ServerName           string   `protobuf:"bytes,9,opt,name=serverName,proto3" json:"serverName,omitempty"`                       //商家名称
	ServerLevel          int64    `protobuf:"varint,10,opt,name=serverLevel,proto3" json:"serverLevel,omitempty"`                   //商家等级
	ServerLevelName      string   `protobuf:"bytes,11,opt,name=serverLevelName,proto3" json:"serverLevelName,omitempty"`            //商家等级名称
	SevenTwoDeliveryRate string   `protobuf:"bytes,12,opt,name=sevenTwoDeliveryRate,proto3" json:"sevenTwoDeliveryRate,omitempty"`  //最近7-2天发货率
	TwoDeliveryRate      string   `protobuf:"bytes,13,opt,name=twoDeliveryRate,proto3" json:"twoDeliveryRate,omitempty"`            //最近2天发货率
	DeliveryRate         string   `protobuf:"bytes,14,opt,name=deliveryRate,proto3" json:"deliveryRate,omitempty"`                  //派单总发货率
	SevenTwoOrderCount   int64    `protobuf:"varint,15,opt,name=sevenTwoOrderCount,proto3" json:"sevenTwoOrderCount,omitempty"`     //最近7-2天订单量
	CreatedAt            int64    `protobuf:"varint,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                       //创建时间
	ThreeOneDeliveryRate string   `protobuf:"bytes,17,opt,name=threeOneDeliveryRate,proto3" json:"threeOneDeliveryRate,omitempty"`  //最近3-1天发货率
	ThreeOneOrderCount   int64    `protobuf:"varint,18,opt,name=threeOneOrderCount,proto3" json:"threeOneOrderCount,omitempty"`     //最近3-1天订单量
	ServerCanDeliveryNum uint64   `protobuf:"varint,19,opt,name=serverCanDeliveryNum,proto3" json:"serverCanDeliveryNum,omitempty"` //可发货订单
	ServerIsDeliveryNum  uint64   `protobuf:"varint,20,opt,name=serverIsDeliveryNum,proto3" json:"serverIsDeliveryNum,omitempty"`   //已发货订单
	OrderDeliveryRate    string   `protobuf:"bytes,21,opt,name=orderDeliveryRate,proto3" json:"orderDeliveryRate,omitempty"`        //发货率
	PendingOrderNum      uint64   `protobuf:"varint,22,opt,name=pendingOrderNum,proto3" json:"pendingOrderNum,omitempty"`           //未响应订单量
}

func (x *DirectedDispatchServerFilter) Reset() {
	*x = DirectedDispatchServerFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectedDispatchServerFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectedDispatchServerFilter) ProtoMessage() {}

func (x *DirectedDispatchServerFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectedDispatchServerFilter.ProtoReflect.Descriptor instead.
func (*DirectedDispatchServerFilter) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{66}
}

func (x *DirectedDispatchServerFilter) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *DirectedDispatchServerFilter) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DirectedDispatchServerFilter) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *DirectedDispatchServerFilter) GetSortType() []string {
	if x != nil {
		return x.SortType
	}
	return nil
}

func (x *DirectedDispatchServerFilter) GetGenTotal() bool {
	if x != nil {
		return x.GenTotal
	}
	return false
}

func (x *DirectedDispatchServerFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DirectedDispatchServerFilter) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DirectedDispatchServerFilter) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *DirectedDispatchServerFilter) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *DirectedDispatchServerFilter) GetServerLevel() int64 {
	if x != nil {
		return x.ServerLevel
	}
	return 0
}

func (x *DirectedDispatchServerFilter) GetServerLevelName() string {
	if x != nil {
		return x.ServerLevelName
	}
	return ""
}

func (x *DirectedDispatchServerFilter) GetSevenTwoDeliveryRate() string {
	if x != nil {
		return x.SevenTwoDeliveryRate
	}
	return ""
}

func (x *DirectedDispatchServerFilter) GetTwoDeliveryRate() string {
	if x != nil {
		return x.TwoDeliveryRate
	}
	return ""
}

func (x *DirectedDispatchServerFilter) GetDeliveryRate() string {
	if x != nil {
		return x.DeliveryRate
	}
	return ""
}

func (x *DirectedDispatchServerFilter) GetSevenTwoOrderCount() int64 {
	if x != nil {
		return x.SevenTwoOrderCount
	}
	return 0
}

func (x *DirectedDispatchServerFilter) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DirectedDispatchServerFilter) GetThreeOneDeliveryRate() string {
	if x != nil {
		return x.ThreeOneDeliveryRate
	}
	return ""
}

func (x *DirectedDispatchServerFilter) GetThreeOneOrderCount() int64 {
	if x != nil {
		return x.ThreeOneOrderCount
	}
	return 0
}

func (x *DirectedDispatchServerFilter) GetServerCanDeliveryNum() uint64 {
	if x != nil {
		return x.ServerCanDeliveryNum
	}
	return 0
}

func (x *DirectedDispatchServerFilter) GetServerIsDeliveryNum() uint64 {
	if x != nil {
		return x.ServerIsDeliveryNum
	}
	return 0
}

func (x *DirectedDispatchServerFilter) GetOrderDeliveryRate() string {
	if x != nil {
		return x.OrderDeliveryRate
	}
	return ""
}

func (x *DirectedDispatchServerFilter) GetPendingOrderNum() uint64 {
	if x != nil {
		return x.PendingOrderNum
	}
	return 0
}

type DirectedDispatchServerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectedDispatchServer []*DirectedDispatchServer `protobuf:"bytes,1,rep,name=directedDispatchServer,proto3" json:"directedDispatchServer,omitempty"` // directedDispatchServerList
	TotalPage              int64                     `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`                          //总页数
	Total                  int64                     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                  //总数据量
	PerPage                int32                     `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`                              //当前第几页
	PerSize                int32                     `protobuf:"varint,5,opt,name=perSize,proto3" json:"perSize,omitempty"`                              //每页数据量
	Count                  int32                     `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                  //当前页实际数量
}

func (x *DirectedDispatchServerList) Reset() {
	*x = DirectedDispatchServerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectedDispatchServerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectedDispatchServerList) ProtoMessage() {}

func (x *DirectedDispatchServerList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_service_diversion_diversion_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectedDispatchServerList.ProtoReflect.Descriptor instead.
func (*DirectedDispatchServerList) Descriptor() ([]byte, []int) {
	return file_proto_go_service_diversion_diversion_proto_rawDescGZIP(), []int{67}
}

func (x *DirectedDispatchServerList) GetDirectedDispatchServer() []*DirectedDispatchServer {
	if x != nil {
		return x.DirectedDispatchServer
	}
	return nil
}

func (x *DirectedDispatchServerList) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *DirectedDispatchServerList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DirectedDispatchServerList) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *DirectedDispatchServerList) GetPerSize() int32 {
	if x != nil {
		return x.PerSize
	}
	return 0
}

func (x *DirectedDispatchServerList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_proto_go_service_diversion_diversion_proto protoreflect.FileDescriptor

var file_proto_go_service_diversion_diversion_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x0f, 0x41, 0x62, 0x74, 0x65,
	0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x15, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x49, 0x64, 0x22, 0xb3, 0x01,
	0x0a, 0x13, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73,
	0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0f, 0x61, 0x62, 0x74, 0x65,
	0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22,
	0xa3, 0x02, 0x0a, 0x1b, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x56, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x56, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x19, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x15, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x15, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x9a, 0x04, 0x0a, 0x10, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x71, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xd4, 0x04, 0x0a, 0x16, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x71, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f,
	0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x66, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x14, 0x41, 0x62, 0x74, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x10, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x22, 0xec, 0x02, 0x0a, 0x0c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x22, 0xa6, 0x03, 0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0c, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x0f, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xf5, 0x01, 0x0a, 0x15, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x41, 0x62,
	0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22,
	0x96, 0x02, 0x0a, 0x16, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd0, 0x02, 0x0a, 0x1c, 0x41, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x1a,
	0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x16, 0x61, 0x62,
	0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x16, 0x61,
	0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a,
	0x1b, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a,
	0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0xbd, 0x03, 0x0a, 0x13, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x22, 0xf7, 0x03, 0x0a, 0x19, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73,
	0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0xc3, 0x01,
	0x0a, 0x17, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x61, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x13, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0xe5, 0x03, 0x0a, 0x0d, 0x54, 0x62, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x41,
	0x75, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x69, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x73, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x7a, 0x68, 0x69, 0x6d, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x7a, 0x68, 0x69, 0x6d, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9f, 0x04, 0x0a, 0x13,
	0x54, 0x62, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x69, 0x70, 0x61,
	0x79, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x69, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x73, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x7a, 0x68, 0x69, 0x6d, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x7a, 0x68, 0x69, 0x6d, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xab, 0x01,
	0x0a, 0x11, 0x54, 0x62, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x62, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x52, 0x0d, 0x74, 0x62, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x12, 0x2a,
	0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa9,
	0x03, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69,
	0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0e, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x14, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x75, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x70, 0x75, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x15, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x22, 0xf2, 0x01, 0x0a, 0x18, 0x41, 0x75, 0x74,
	0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xac, 0x02,
	0x0a, 0x1e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xd7, 0x01, 0x0a,
	0x1c, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a,
	0x18, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x70, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70,
	0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xa9, 0x03, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x75, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x70, 0x75, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x81,
	0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x62, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x70, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xd0, 0x02, 0x0a, 0x16, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xe0, 0x03, 0x0a, 0x1c, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x1a, 0x54, 0x62, 0x6c,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x16, 0x74, 0x62, 0x6c, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x16, 0x74, 0x62, 0x6c, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xc1, 0x03, 0x0a, 0x1d, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x6f, 0x70, 0x57, 0x61, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x6f, 0x70, 0x57, 0x61, 0x79, 0x12, 0x2c,
	0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x22, 0xd1, 0x04, 0x0a, 0x23, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65,
	0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65,
	0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x65, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65,
	0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x6f, 0x70,
	0x57, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x6f, 0x70, 0x57,
	0x61, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x75,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x91, 0x02, 0x0a, 0x21, 0x54, 0x62, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6e,
	0x0a, 0x1d, 0x74, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x1d, 0x74, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf8, 0x03, 0x0a,
	0x12, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x74, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x62, 0x74, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x05, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x74,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62,
	0x74, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a,
	0x12, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x12, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x02, 0x0a, 0x19, 0x54,
	0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69,
	0x6e, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x64,
	0x42, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f,
	0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xb5, 0x03, 0x0a, 0x1f, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x1d, 0x54,
	0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x19,
	0x74, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x19, 0x74, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82,
	0x02, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0x92, 0x03, 0x0a, 0x22, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x8d, 0x02, 0x0a, 0x20, 0x41, 0x75, 0x74,
	0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6b, 0x0a,
	0x1c, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x1c, 0x61, 0x75,
	0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x18, 0x41, 0x75, 0x74,
	0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c,
	0x6f, 0x67, 0x4e, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x64,
	0x69, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x8e, 0x03, 0x0a, 0x1e, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65,
	0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65,
	0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x64, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xfd, 0x01, 0x0a, 0x1c, 0x41,
	0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x18, 0x61,
	0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e,
	0x65, 0x77, 0x52, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x18, 0x41,
	0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22,
	0xd2, 0x02, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x22, 0xfd, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x18, 0x61, 0x75,
	0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x1d, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x23, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x91, 0x02, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x1b, 0x44, 0x77, 0x64, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x73, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x49, 0x64, 0x22, 0xcd, 0x03, 0x0a, 0x21, 0x44, 0x77, 0x64, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x69, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x73, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x49, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x1f, 0x44, 0x77, 0x64, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x69, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x1b, 0x64, 0x77, 0x64, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x77, 0x64, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x1b, 0x64, 0x77, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xb4, 0x05, 0x0a, 0x16, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x54, 0x77,
	0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x54, 0x77, 0x6f, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x77, 0x6f,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x77, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x76, 0x65, 0x6e,
	0x54, 0x77, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x54, 0x77, 0x6f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e,
	0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x65, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x68, 0x72,
	0x65, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x75,
	0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x12,
	0x2c, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0xc4, 0x06, 0x0a, 0x1c, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x73, 0x65, 0x76, 0x65, 0x6e, 0x54, 0x77, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x76, 0x65,
	0x6e, 0x54, 0x77, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x77, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x77, 0x6f, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x54, 0x77, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x65, 0x76, 0x65,
	0x6e, 0x54, 0x77, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x74, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x68, 0x72, 0x65,
	0x65, 0x4f, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x68,
	0x72, 0x65, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0xf5,
	0x01, 0x0a, 0x1a, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a,
	0x16, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x16, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xcb, 0x01, 0x0a, 0x0f, 0x61, 0x62, 0x74, 0x65, 0x73,
	0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x1a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1a, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x62, 0x74, 0x65, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x74, 0x65, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x32, 0xf5, 0x01, 0x0a, 0x15, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6c,
	0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x26, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x20, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6e, 0x0a, 0x1e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xd2, 0x01, 0x0a,
	0x10, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x5d, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x21, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x5f, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x1f, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x32, 0xb6, 0x01, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x51, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x2e,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1b, 0x2e,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xcb, 0x01, 0x0a, 0x0f, 0x61,
	0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5a,
	0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1a,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5c, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xe7, 0x03, 0x0a, 0x16, 0x61, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x6f, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x62, 0x74, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x21, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62,
	0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x71, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x25, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x64, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x26, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x2e, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2b, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x32, 0xe7, 0x01, 0x0a, 0x13, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x66, 0x0a, 0x1e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x2e, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x68, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x62, 0x74, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x22, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xbd, 0x01, 0x0a,
	0x0d, 0x74, 0x62, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x12, 0x54,
	0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x62, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x12, 0x56, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x62, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1c,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x55, 0x0a, 0x10,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x41, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x32, 0xeb, 0x01, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1a,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x04, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x11, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x32, 0x8a, 0x02, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x75,
	0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x77, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x27, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xef,
	0x03, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x12, 0x6d, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x12,
	0x24, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x70, 0x75, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x12, 0x6d, 0x0a, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x12, 0x24,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x70, 0x75, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x12, 0x78, 0x0a, 0x24, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2a, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x24,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x70, 0x75, 0x12, 0x7a, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x28, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74,
	0x32, 0xfc, 0x01, 0x0a, 0x16, 0x74, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x6f, 0x0a, 0x21, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x27, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x71, 0x0a, 0x1f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x27, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x25, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x32,
	0xa5, 0x04, 0x0a, 0x1d, 0x74, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x79, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x62, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x1a, 0x28, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x23,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x28, 0x2e,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x28, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x28, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x86,
	0x01, 0x0a, 0x26, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2c, 0x2e, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x94, 0x03, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x58,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x1d, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x1a, 0x1d, 0x2e, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x58, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x12, 0x1d, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x1a, 0x1d, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x12, 0x63, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x65, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x64, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xef,
	0x03, 0x0a, 0x19, 0x74, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x6d, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x24, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x6d, 0x0a, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x24,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x6f, 0x6f, 0x6c, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x78, 0x0a, 0x24, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2a, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x24,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x7a, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x62, 0x6c,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x28, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x32, 0x98, 0x04, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x76, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b,
	0x1a, 0x27, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x76, 0x0a, 0x22, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x27, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x27, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x81, 0x01, 0x0a, 0x27, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x2e,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x27, 0x2e, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x83, 0x01, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2d, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2b,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xe2, 0x03, 0x0a, 0x18,
	0x61, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x12, 0x6a, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x1a,
	0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f,
	0x67, 0x4e, 0x65, 0x77, 0x12, 0x6a, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x1a, 0x23, 0x2e, 0x64, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77,
	0x12, 0x75, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65,
	0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x12, 0x77, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65,
	0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x27, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74,
	0x32, 0xe2, 0x03, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x6a, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x1a, 0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x1a, 0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x75, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x23, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x77, 0x0a, 0x21,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x29, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x27, 0x2e, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xa5, 0x04, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x79, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x28,
	0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x28, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x79, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x1a, 0x28, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x84, 0x01,
	0x0a, 0x28, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x28, 0x2e, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x26, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2e, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x2c, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xa0, 0x02,
	0x0a, 0x1b, 0x64, 0x77, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x7e, 0x0a,
	0x26, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x77, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65,
	0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x77, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x26, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x77, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x80, 0x01,
	0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x77, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x77, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2a, 0x2e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x77, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_go_service_diversion_diversion_proto_rawDescOnce sync.Once
	file_proto_go_service_diversion_diversion_proto_rawDescData = file_proto_go_service_diversion_diversion_proto_rawDesc
)

func file_proto_go_service_diversion_diversion_proto_rawDescGZIP() []byte {
	file_proto_go_service_diversion_diversion_proto_rawDescOnce.Do(func() {
		file_proto_go_service_diversion_diversion_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_go_service_diversion_diversion_proto_rawDescData)
	})
	return file_proto_go_service_diversion_diversion_proto_rawDescData
}

var file_proto_go_service_diversion_diversion_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_proto_go_service_diversion_diversion_proto_goTypes = []interface{}{
	(*AbtestWhiteUser)(nil),                     // 0: diversion.AbtestWhiteUser
	(*AbtestWhiteUserFilter)(nil),               // 1: diversion.AbtestWhiteUserFilter
	(*AbtestWhiteUserList)(nil),                 // 2: diversion.AbtestWhiteUserList
	(*AbtestExperimentGroup)(nil),               // 3: diversion.AbtestExperimentGroup
	(*AbtestExperimentGroupFilter)(nil),         // 4: diversion.AbtestExperimentGroupFilter
	(*AbtestExperimentGroupList)(nil),           // 5: diversion.AbtestExperimentGroupList
	(*AbtestExperiment)(nil),                    // 6: diversion.AbtestExperiment
	(*AbtestExperimentFilter)(nil),              // 7: diversion.AbtestExperimentFilter
	(*AbtestExperimentList)(nil),                // 8: diversion.AbtestExperimentList
	(*GlobalSecret)(nil),                        // 9: diversion.GlobalSecret
	(*GlobalSecretFilter)(nil),                  // 10: diversion.GlobalSecretFilter
	(*GlobalSecretList)(nil),                    // 11: diversion.GlobalSecretList
	(*AbtestUserGroup)(nil),                     // 12: diversion.AbtestUserGroup
	(*AbtestUserGroupFilter)(nil),               // 13: diversion.AbtestUserGroupFilter
	(*AbtestUserGroupList)(nil),                 // 14: diversion.AbtestUserGroupList
	(*AbtestExperimentResult)(nil),              // 15: diversion.AbtestExperimentResult
	(*AbtestExperimentResultFilter)(nil),        // 16: diversion.AbtestExperimentResultFilter
	(*AbtestExperimentResultList)(nil),          // 17: diversion.AbtestExperimentResultList
	(*AbtestExperimentResultCount)(nil),         // 18: diversion.AbtestExperimentResultCount
	(*CreateAbtestExperimentResultResp)(nil),    // 19: diversion.CreateAbtestExperimentResultResp
	(*AbtestUserGroupConf)(nil),                 // 20: diversion.AbtestUserGroupConf
	(*AbtestUserGroupConfFilter)(nil),           // 21: diversion.AbtestUserGroupConfFilter
	(*AbtestUserGroupConfList)(nil),             // 22: diversion.AbtestUserGroupConfList
	(*TblUserAlipay)(nil),                       // 23: diversion.TblUserAlipay
	(*TblUserAlipayFilter)(nil),                 // 24: diversion.TblUserAlipayFilter
	(*TblUserAlipayList)(nil),                   // 25: diversion.TblUserAlipayList
	(*AllocateRpcReq)(nil),                      // 26: diversion.AllocateRpcReq
	(*AllocateRpcResp)(nil),                     // 27: diversion.AllocateRpcResp
	(*DispatchRpcReq)(nil),                      // 28: diversion.DispatchRpcReq
	(*DispatchRpcResp)(nil),                     // 29: diversion.DispatchRpcResp
	(*QualityRatioLimitReq)(nil),                // 30: diversion.QualityRatioLimitReq
	(*QualityRatioLimitResp)(nil),               // 31: diversion.QualityRatioLimitResp
	(*AutoDispatchDecisionPath)(nil),            // 32: diversion.AutoDispatchDecisionPath
	(*AutoDispatchDecisionPathFilter)(nil),      // 33: diversion.AutoDispatchDecisionPathFilter
	(*AutoDispatchDecisionPathList)(nil),        // 34: diversion.AutoDispatchDecisionPathList
	(*CommodityActivityOrderSpu)(nil),           // 35: diversion.CommodityActivityOrderSpu
	(*CommodityActivityOrderSpuFilter)(nil),     // 36: diversion.CommodityActivityOrderSpuFilter
	(*CommodityActivityOrderSpuList)(nil),       // 37: diversion.CommodityActivityOrderSpuList
	(*TblDispatchOrderFactor)(nil),              // 38: diversion.TblDispatchOrderFactor
	(*TblDispatchOrderFactorFilter)(nil),        // 39: diversion.TblDispatchOrderFactorFilter
	(*TblDispatchOrderFactorList)(nil),          // 40: diversion.TblDispatchOrderFactorList
	(*TblServerDistributeLimitRules)(nil),       // 41: diversion.TblServerDistributeLimitRules
	(*TblServerDistributeLimitRulesFilter)(nil), // 42: diversion.TblServerDistributeLimitRulesFilter
	(*TblServerDistributeLimitRulesList)(nil),   // 43: diversion.TblServerDistributeLimitRulesList
	(*DistributeOrderLog)(nil),                  // 44: diversion.DistributeOrderLog
	(*DistributeOrderLogFilter)(nil),            // 45: diversion.DistributeOrderLogFilter
	(*DistributeOrderLogList)(nil),              // 46: diversion.DistributeOrderLogList
	(*TblDispatchServerFlowPool)(nil),           // 47: diversion.TblDispatchServerFlowPool
	(*TblDispatchServerFlowPoolFilter)(nil),     // 48: diversion.TblDispatchServerFlowPoolFilter
	(*TblDispatchServerFlowPoolList)(nil),       // 49: diversion.TblDispatchServerFlowPoolList
	(*AutoDispatchDecisionPathLink)(nil),        // 50: diversion.AutoDispatchDecisionPathLink
	(*AutoDispatchDecisionPathLinkFilter)(nil),  // 51: diversion.AutoDispatchDecisionPathLinkFilter
	(*AutoDispatchDecisionPathLinkList)(nil),    // 52: diversion.AutoDispatchDecisionPathLinkList
	(*AutoDispatchConfigLogNew)(nil),            // 53: diversion.AutoDispatchConfigLogNew
	(*AutoDispatchConfigLogNewFilter)(nil),      // 54: diversion.AutoDispatchConfigLogNewFilter
	(*AutoDispatchConfigLogNewList)(nil),        // 55: diversion.AutoDispatchConfigLogNewList
	(*AutoDispatchDecisionRule)(nil),            // 56: diversion.AutoDispatchDecisionRule
	(*AutoDispatchDecisionRuleFilter)(nil),      // 57: diversion.AutoDispatchDecisionRuleFilter
	(*AutoDispatchDecisionRuleList)(nil),        // 58: diversion.AutoDispatchDecisionRuleList
	(*AutoDispatchDecisionPathOrder)(nil),       // 59: diversion.AutoDispatchDecisionPathOrder
	(*AutoDispatchDecisionPathOrderFilter)(nil), // 60: diversion.AutoDispatchDecisionPathOrderFilter
	(*AutoDispatchDecisionPathOrderList)(nil),   // 61: diversion.AutoDispatchDecisionPathOrderList
	(*DwdDistributeValidOrderView)(nil),         // 62: diversion.DwdDistributeValidOrderView
	(*DwdDistributeValidOrderViewFilter)(nil),   // 63: diversion.DwdDistributeValidOrderViewFilter
	(*DwdDistributeValidOrderViewList)(nil),     // 64: diversion.DwdDistributeValidOrderViewList
	(*DirectedDispatchServer)(nil),              // 65: diversion.DirectedDispatchServer
	(*DirectedDispatchServerFilter)(nil),        // 66: diversion.DirectedDispatchServerFilter
	(*DirectedDispatchServerList)(nil),          // 67: diversion.DirectedDispatchServerList
}
var file_proto_go_service_diversion_diversion_proto_depIdxs = []int32{
	0,  // 0: diversion.AbtestWhiteUserList.abtestWhiteUser:type_name -> diversion.AbtestWhiteUser
	3,  // 1: diversion.AbtestExperimentGroupList.abtestExperimentGroup:type_name -> diversion.AbtestExperimentGroup
	6,  // 2: diversion.AbtestExperimentList.abtestExperiment:type_name -> diversion.AbtestExperiment
	9,  // 3: diversion.GlobalSecretList.globalSecret:type_name -> diversion.GlobalSecret
	12, // 4: diversion.AbtestUserGroupList.abtestUserGroup:type_name -> diversion.AbtestUserGroup
	15, // 5: diversion.AbtestExperimentResultList.abtestExperimentResult:type_name -> diversion.AbtestExperimentResult
	20, // 6: diversion.AbtestUserGroupConfList.abtestUserGroupConf:type_name -> diversion.AbtestUserGroupConf
	23, // 7: diversion.TblUserAlipayList.tblUserAlipay:type_name -> diversion.TblUserAlipay
	32, // 8: diversion.AutoDispatchDecisionPathList.autoDispatchDecisionPath:type_name -> diversion.AutoDispatchDecisionPath
	35, // 9: diversion.CommodityActivityOrderSpuList.commodityActivityOrderSpu:type_name -> diversion.CommodityActivityOrderSpu
	38, // 10: diversion.TblDispatchOrderFactorList.tblDispatchOrderFactor:type_name -> diversion.TblDispatchOrderFactor
	41, // 11: diversion.TblServerDistributeLimitRulesList.tblServerDistributeLimitRules:type_name -> diversion.TblServerDistributeLimitRules
	44, // 12: diversion.DistributeOrderLogList.distributeOrderLog:type_name -> diversion.DistributeOrderLog
	47, // 13: diversion.TblDispatchServerFlowPoolList.tblDispatchServerFlowPool:type_name -> diversion.TblDispatchServerFlowPool
	50, // 14: diversion.AutoDispatchDecisionPathLinkList.autoDispatchDecisionPathLink:type_name -> diversion.AutoDispatchDecisionPathLink
	53, // 15: diversion.AutoDispatchConfigLogNewList.autoDispatchConfigLogNew:type_name -> diversion.AutoDispatchConfigLogNew
	56, // 16: diversion.AutoDispatchDecisionRuleList.autoDispatchDecisionRule:type_name -> diversion.AutoDispatchDecisionRule
	59, // 17: diversion.AutoDispatchDecisionPathOrderList.autoDispatchDecisionPathOrder:type_name -> diversion.AutoDispatchDecisionPathOrder
	62, // 18: diversion.DwdDistributeValidOrderViewList.dwdDistributeValidOrderView:type_name -> diversion.DwdDistributeValidOrderView
	65, // 19: diversion.DirectedDispatchServerList.directedDispatchServer:type_name -> diversion.DirectedDispatchServer
	1,  // 20: diversion.abtestWhiteUser.QueryAbtestWhiteUserDetail:input_type -> diversion.AbtestWhiteUserFilter
	1,  // 21: diversion.abtestWhiteUser.QueryAbtestWhiteUserList:input_type -> diversion.AbtestWhiteUserFilter
	4,  // 22: diversion.abtestExperimentGroup.QueryAbtestExperimentGroupDetail:input_type -> diversion.AbtestExperimentGroupFilter
	4,  // 23: diversion.abtestExperimentGroup.QueryAbtestExperimentGroupList:input_type -> diversion.AbtestExperimentGroupFilter
	7,  // 24: diversion.abtestExperiment.QueryAbtestExperimentDetail:input_type -> diversion.AbtestExperimentFilter
	7,  // 25: diversion.abtestExperiment.QueryAbtestExperimentList:input_type -> diversion.AbtestExperimentFilter
	10, // 26: diversion.globalSecret.QueryGlobalSecretDetail:input_type -> diversion.GlobalSecretFilter
	10, // 27: diversion.globalSecret.QueryGlobalSecretList:input_type -> diversion.GlobalSecretFilter
	13, // 28: diversion.abtestUserGroup.QueryAbtestUserGroupDetail:input_type -> diversion.AbtestUserGroupFilter
	13, // 29: diversion.abtestUserGroup.QueryAbtestUserGroupList:input_type -> diversion.AbtestUserGroupFilter
	16, // 30: diversion.abtestExperimentResult.QueryAbtestExperimentResultDetail:input_type -> diversion.AbtestExperimentResultFilter
	16, // 31: diversion.abtestExperimentResult.QueryAbtestExperimentResultList:input_type -> diversion.AbtestExperimentResultFilter
	16, // 32: diversion.abtestExperimentResult.QueryAbtestExperimentResultCount:input_type -> diversion.AbtestExperimentResultFilter
	16, // 33: diversion.abtestExperimentResult.CreateAbtestExperimentResult:input_type -> diversion.AbtestExperimentResultFilter
	21, // 34: diversion.abtestUserGroupConf.QueryAbtestUserGroupConfDetail:input_type -> diversion.AbtestUserGroupConfFilter
	21, // 35: diversion.abtestUserGroupConf.QueryAbtestUserGroupConfList:input_type -> diversion.AbtestUserGroupConfFilter
	24, // 36: diversion.tblUserAlipay.QueryTblUserAlipayDetail:input_type -> diversion.TblUserAlipayFilter
	24, // 37: diversion.tblUserAlipay.QueryTblUserAlipayList:input_type -> diversion.TblUserAlipayFilter
	26, // 38: diversion.diversionService.Allocate:input_type -> diversion.AllocateRpcReq
	28, // 39: diversion.dispatchService.Dispatch:input_type -> diversion.DispatchRpcReq
	28, // 40: diversion.dispatchService.Test:input_type -> diversion.DispatchRpcReq
	30, // 41: diversion.dispatchService.qualityRatioLimit:input_type -> diversion.QualityRatioLimitReq
	33, // 42: diversion.autoDispatchDecisionPath.QueryAutoDispatchDecisionPathDetail:input_type -> diversion.AutoDispatchDecisionPathFilter
	33, // 43: diversion.autoDispatchDecisionPath.QueryAutoDispatchDecisionPathList:input_type -> diversion.AutoDispatchDecisionPathFilter
	35, // 44: diversion.commodityActivityOrderSpu.CreateCommodityActivityOrderSpu:input_type -> diversion.CommodityActivityOrderSpu
	35, // 45: diversion.commodityActivityOrderSpu.UpdateCommodityActivityOrderSpu:input_type -> diversion.CommodityActivityOrderSpu
	36, // 46: diversion.commodityActivityOrderSpu.QueryCommodityActivityOrderSpuDetail:input_type -> diversion.CommodityActivityOrderSpuFilter
	36, // 47: diversion.commodityActivityOrderSpu.QueryCommodityActivityOrderSpuList:input_type -> diversion.CommodityActivityOrderSpuFilter
	39, // 48: diversion.tblDispatchOrderFactor.QueryTblDispatchOrderFactorDetail:input_type -> diversion.TblDispatchOrderFactorFilter
	39, // 49: diversion.tblDispatchOrderFactor.QueryTblDispatchOrderFactorList:input_type -> diversion.TblDispatchOrderFactorFilter
	41, // 50: diversion.tblServerDistributeLimitRules.CreateTblServerDistributeLimitRules:input_type -> diversion.TblServerDistributeLimitRules
	41, // 51: diversion.tblServerDistributeLimitRules.UpdateTblServerDistributeLimitRules:input_type -> diversion.TblServerDistributeLimitRules
	42, // 52: diversion.tblServerDistributeLimitRules.QueryTblServerDistributeLimitRulesDetail:input_type -> diversion.TblServerDistributeLimitRulesFilter
	42, // 53: diversion.tblServerDistributeLimitRules.QueryTblServerDistributeLimitRulesList:input_type -> diversion.TblServerDistributeLimitRulesFilter
	44, // 54: diversion.distributeOrderLog.CreateDistributeOrderLog:input_type -> diversion.DistributeOrderLog
	44, // 55: diversion.distributeOrderLog.UpdateDistributeOrderLog:input_type -> diversion.DistributeOrderLog
	45, // 56: diversion.distributeOrderLog.QueryDistributeOrderLogDetail:input_type -> diversion.DistributeOrderLogFilter
	45, // 57: diversion.distributeOrderLog.QueryDistributeOrderLogList:input_type -> diversion.DistributeOrderLogFilter
	47, // 58: diversion.tblDispatchServerFlowPool.CreateTblDispatchServerFlowPool:input_type -> diversion.TblDispatchServerFlowPool
	47, // 59: diversion.tblDispatchServerFlowPool.UpdateTblDispatchServerFlowPool:input_type -> diversion.TblDispatchServerFlowPool
	48, // 60: diversion.tblDispatchServerFlowPool.QueryTblDispatchServerFlowPoolDetail:input_type -> diversion.TblDispatchServerFlowPoolFilter
	48, // 61: diversion.tblDispatchServerFlowPool.QueryTblDispatchServerFlowPoolList:input_type -> diversion.TblDispatchServerFlowPoolFilter
	50, // 62: diversion.autoDispatchDecisionPathLink.CreateAutoDispatchDecisionPathLink:input_type -> diversion.AutoDispatchDecisionPathLink
	50, // 63: diversion.autoDispatchDecisionPathLink.UpdateAutoDispatchDecisionPathLink:input_type -> diversion.AutoDispatchDecisionPathLink
	51, // 64: diversion.autoDispatchDecisionPathLink.QueryAutoDispatchDecisionPathLinkDetail:input_type -> diversion.AutoDispatchDecisionPathLinkFilter
	51, // 65: diversion.autoDispatchDecisionPathLink.QueryAutoDispatchDecisionPathLinkList:input_type -> diversion.AutoDispatchDecisionPathLinkFilter
	53, // 66: diversion.autoDispatchConfigLogNew.CreateAutoDispatchConfigLogNew:input_type -> diversion.AutoDispatchConfigLogNew
	53, // 67: diversion.autoDispatchConfigLogNew.UpdateAutoDispatchConfigLogNew:input_type -> diversion.AutoDispatchConfigLogNew
	54, // 68: diversion.autoDispatchConfigLogNew.QueryAutoDispatchConfigLogNewDetail:input_type -> diversion.AutoDispatchConfigLogNewFilter
	54, // 69: diversion.autoDispatchConfigLogNew.QueryAutoDispatchConfigLogNewList:input_type -> diversion.AutoDispatchConfigLogNewFilter
	56, // 70: diversion.autoDispatchDecisionRule.CreateAutoDispatchDecisionRule:input_type -> diversion.AutoDispatchDecisionRule
	56, // 71: diversion.autoDispatchDecisionRule.UpdateAutoDispatchDecisionRule:input_type -> diversion.AutoDispatchDecisionRule
	57, // 72: diversion.autoDispatchDecisionRule.QueryAutoDispatchDecisionRuleDetail:input_type -> diversion.AutoDispatchDecisionRuleFilter
	57, // 73: diversion.autoDispatchDecisionRule.QueryAutoDispatchDecisionRuleList:input_type -> diversion.AutoDispatchDecisionRuleFilter
	59, // 74: diversion.autoDispatchDecisionPathOrder.CreateAutoDispatchDecisionPathOrder:input_type -> diversion.AutoDispatchDecisionPathOrder
	59, // 75: diversion.autoDispatchDecisionPathOrder.UpdateAutoDispatchDecisionPathOrder:input_type -> diversion.AutoDispatchDecisionPathOrder
	60, // 76: diversion.autoDispatchDecisionPathOrder.QueryAutoDispatchDecisionPathOrderDetail:input_type -> diversion.AutoDispatchDecisionPathOrderFilter
	60, // 77: diversion.autoDispatchDecisionPathOrder.QueryAutoDispatchDecisionPathOrderList:input_type -> diversion.AutoDispatchDecisionPathOrderFilter
	63, // 78: diversion.dwdDistributeValidOrderView.QueryDwdDistributeValidOrderViewDetail:input_type -> diversion.DwdDistributeValidOrderViewFilter
	63, // 79: diversion.dwdDistributeValidOrderView.QueryDwdDistributeValidOrderViewList:input_type -> diversion.DwdDistributeValidOrderViewFilter
	0,  // 80: diversion.abtestWhiteUser.QueryAbtestWhiteUserDetail:output_type -> diversion.AbtestWhiteUser
	2,  // 81: diversion.abtestWhiteUser.QueryAbtestWhiteUserList:output_type -> diversion.AbtestWhiteUserList
	3,  // 82: diversion.abtestExperimentGroup.QueryAbtestExperimentGroupDetail:output_type -> diversion.AbtestExperimentGroup
	5,  // 83: diversion.abtestExperimentGroup.QueryAbtestExperimentGroupList:output_type -> diversion.AbtestExperimentGroupList
	6,  // 84: diversion.abtestExperiment.QueryAbtestExperimentDetail:output_type -> diversion.AbtestExperiment
	8,  // 85: diversion.abtestExperiment.QueryAbtestExperimentList:output_type -> diversion.AbtestExperimentList
	9,  // 86: diversion.globalSecret.QueryGlobalSecretDetail:output_type -> diversion.GlobalSecret
	11, // 87: diversion.globalSecret.QueryGlobalSecretList:output_type -> diversion.GlobalSecretList
	12, // 88: diversion.abtestUserGroup.QueryAbtestUserGroupDetail:output_type -> diversion.AbtestUserGroup
	14, // 89: diversion.abtestUserGroup.QueryAbtestUserGroupList:output_type -> diversion.AbtestUserGroupList
	15, // 90: diversion.abtestExperimentResult.QueryAbtestExperimentResultDetail:output_type -> diversion.AbtestExperimentResult
	17, // 91: diversion.abtestExperimentResult.QueryAbtestExperimentResultList:output_type -> diversion.AbtestExperimentResultList
	18, // 92: diversion.abtestExperimentResult.QueryAbtestExperimentResultCount:output_type -> diversion.AbtestExperimentResultCount
	19, // 93: diversion.abtestExperimentResult.CreateAbtestExperimentResult:output_type -> diversion.CreateAbtestExperimentResultResp
	20, // 94: diversion.abtestUserGroupConf.QueryAbtestUserGroupConfDetail:output_type -> diversion.AbtestUserGroupConf
	22, // 95: diversion.abtestUserGroupConf.QueryAbtestUserGroupConfList:output_type -> diversion.AbtestUserGroupConfList
	23, // 96: diversion.tblUserAlipay.QueryTblUserAlipayDetail:output_type -> diversion.TblUserAlipay
	25, // 97: diversion.tblUserAlipay.QueryTblUserAlipayList:output_type -> diversion.TblUserAlipayList
	27, // 98: diversion.diversionService.Allocate:output_type -> diversion.AllocateRpcResp
	29, // 99: diversion.dispatchService.Dispatch:output_type -> diversion.DispatchRpcResp
	29, // 100: diversion.dispatchService.Test:output_type -> diversion.DispatchRpcResp
	31, // 101: diversion.dispatchService.qualityRatioLimit:output_type -> diversion.QualityRatioLimitResp
	32, // 102: diversion.autoDispatchDecisionPath.QueryAutoDispatchDecisionPathDetail:output_type -> diversion.AutoDispatchDecisionPath
	34, // 103: diversion.autoDispatchDecisionPath.QueryAutoDispatchDecisionPathList:output_type -> diversion.AutoDispatchDecisionPathList
	35, // 104: diversion.commodityActivityOrderSpu.CreateCommodityActivityOrderSpu:output_type -> diversion.CommodityActivityOrderSpu
	35, // 105: diversion.commodityActivityOrderSpu.UpdateCommodityActivityOrderSpu:output_type -> diversion.CommodityActivityOrderSpu
	35, // 106: diversion.commodityActivityOrderSpu.QueryCommodityActivityOrderSpuDetail:output_type -> diversion.CommodityActivityOrderSpu
	37, // 107: diversion.commodityActivityOrderSpu.QueryCommodityActivityOrderSpuList:output_type -> diversion.CommodityActivityOrderSpuList
	38, // 108: diversion.tblDispatchOrderFactor.QueryTblDispatchOrderFactorDetail:output_type -> diversion.TblDispatchOrderFactor
	40, // 109: diversion.tblDispatchOrderFactor.QueryTblDispatchOrderFactorList:output_type -> diversion.TblDispatchOrderFactorList
	41, // 110: diversion.tblServerDistributeLimitRules.CreateTblServerDistributeLimitRules:output_type -> diversion.TblServerDistributeLimitRules
	41, // 111: diversion.tblServerDistributeLimitRules.UpdateTblServerDistributeLimitRules:output_type -> diversion.TblServerDistributeLimitRules
	41, // 112: diversion.tblServerDistributeLimitRules.QueryTblServerDistributeLimitRulesDetail:output_type -> diversion.TblServerDistributeLimitRules
	43, // 113: diversion.tblServerDistributeLimitRules.QueryTblServerDistributeLimitRulesList:output_type -> diversion.TblServerDistributeLimitRulesList
	44, // 114: diversion.distributeOrderLog.CreateDistributeOrderLog:output_type -> diversion.DistributeOrderLog
	44, // 115: diversion.distributeOrderLog.UpdateDistributeOrderLog:output_type -> diversion.DistributeOrderLog
	44, // 116: diversion.distributeOrderLog.QueryDistributeOrderLogDetail:output_type -> diversion.DistributeOrderLog
	46, // 117: diversion.distributeOrderLog.QueryDistributeOrderLogList:output_type -> diversion.DistributeOrderLogList
	47, // 118: diversion.tblDispatchServerFlowPool.CreateTblDispatchServerFlowPool:output_type -> diversion.TblDispatchServerFlowPool
	47, // 119: diversion.tblDispatchServerFlowPool.UpdateTblDispatchServerFlowPool:output_type -> diversion.TblDispatchServerFlowPool
	47, // 120: diversion.tblDispatchServerFlowPool.QueryTblDispatchServerFlowPoolDetail:output_type -> diversion.TblDispatchServerFlowPool
	49, // 121: diversion.tblDispatchServerFlowPool.QueryTblDispatchServerFlowPoolList:output_type -> diversion.TblDispatchServerFlowPoolList
	50, // 122: diversion.autoDispatchDecisionPathLink.CreateAutoDispatchDecisionPathLink:output_type -> diversion.AutoDispatchDecisionPathLink
	50, // 123: diversion.autoDispatchDecisionPathLink.UpdateAutoDispatchDecisionPathLink:output_type -> diversion.AutoDispatchDecisionPathLink
	50, // 124: diversion.autoDispatchDecisionPathLink.QueryAutoDispatchDecisionPathLinkDetail:output_type -> diversion.AutoDispatchDecisionPathLink
	52, // 125: diversion.autoDispatchDecisionPathLink.QueryAutoDispatchDecisionPathLinkList:output_type -> diversion.AutoDispatchDecisionPathLinkList
	53, // 126: diversion.autoDispatchConfigLogNew.CreateAutoDispatchConfigLogNew:output_type -> diversion.AutoDispatchConfigLogNew
	53, // 127: diversion.autoDispatchConfigLogNew.UpdateAutoDispatchConfigLogNew:output_type -> diversion.AutoDispatchConfigLogNew
	53, // 128: diversion.autoDispatchConfigLogNew.QueryAutoDispatchConfigLogNewDetail:output_type -> diversion.AutoDispatchConfigLogNew
	55, // 129: diversion.autoDispatchConfigLogNew.QueryAutoDispatchConfigLogNewList:output_type -> diversion.AutoDispatchConfigLogNewList
	56, // 130: diversion.autoDispatchDecisionRule.CreateAutoDispatchDecisionRule:output_type -> diversion.AutoDispatchDecisionRule
	56, // 131: diversion.autoDispatchDecisionRule.UpdateAutoDispatchDecisionRule:output_type -> diversion.AutoDispatchDecisionRule
	56, // 132: diversion.autoDispatchDecisionRule.QueryAutoDispatchDecisionRuleDetail:output_type -> diversion.AutoDispatchDecisionRule
	58, // 133: diversion.autoDispatchDecisionRule.QueryAutoDispatchDecisionRuleList:output_type -> diversion.AutoDispatchDecisionRuleList
	59, // 134: diversion.autoDispatchDecisionPathOrder.CreateAutoDispatchDecisionPathOrder:output_type -> diversion.AutoDispatchDecisionPathOrder
	59, // 135: diversion.autoDispatchDecisionPathOrder.UpdateAutoDispatchDecisionPathOrder:output_type -> diversion.AutoDispatchDecisionPathOrder
	59, // 136: diversion.autoDispatchDecisionPathOrder.QueryAutoDispatchDecisionPathOrderDetail:output_type -> diversion.AutoDispatchDecisionPathOrder
	61, // 137: diversion.autoDispatchDecisionPathOrder.QueryAutoDispatchDecisionPathOrderList:output_type -> diversion.AutoDispatchDecisionPathOrderList
	62, // 138: diversion.dwdDistributeValidOrderView.QueryDwdDistributeValidOrderViewDetail:output_type -> diversion.DwdDistributeValidOrderView
	64, // 139: diversion.dwdDistributeValidOrderView.QueryDwdDistributeValidOrderViewList:output_type -> diversion.DwdDistributeValidOrderViewList
	80, // [80:140] is the sub-list for method output_type
	20, // [20:80] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_go_service_diversion_diversion_proto_init() }
func file_proto_go_service_diversion_diversion_proto_init() {
	if File_proto_go_service_diversion_diversion_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_go_service_diversion_diversion_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestWhiteUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestWhiteUserFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestWhiteUserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestExperimentGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestExperimentGroupFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestExperimentGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestExperiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestExperimentFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestExperimentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalSecretFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalSecretList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestUserGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestUserGroupFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestUserGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestExperimentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestExperimentResultFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestExperimentResultList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestExperimentResultCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAbtestExperimentResultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestUserGroupConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestUserGroupConfFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbtestUserGroupConfList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblUserAlipay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblUserAlipayFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblUserAlipayList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateRpcReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateRpcResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchRpcReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchRpcResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityRatioLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityRatioLimitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionPathFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionPathList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommodityActivityOrderSpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommodityActivityOrderSpuFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommodityActivityOrderSpuList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblDispatchOrderFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblDispatchOrderFactorFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblDispatchOrderFactorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblServerDistributeLimitRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblServerDistributeLimitRulesFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblServerDistributeLimitRulesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributeOrderLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributeOrderLogFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributeOrderLogList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblDispatchServerFlowPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblDispatchServerFlowPoolFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TblDispatchServerFlowPoolList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionPathLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionPathLinkFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionPathLinkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchConfigLogNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchConfigLogNewFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchConfigLogNewList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionRuleFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionRuleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionPathOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionPathOrderFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDispatchDecisionPathOrderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DwdDistributeValidOrderView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DwdDistributeValidOrderViewFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DwdDistributeValidOrderViewList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectedDispatchServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectedDispatchServerFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_service_diversion_diversion_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectedDispatchServerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_go_service_diversion_diversion_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   21,
		},
		GoTypes:           file_proto_go_service_diversion_diversion_proto_goTypes,
		DependencyIndexes: file_proto_go_service_diversion_diversion_proto_depIdxs,
		MessageInfos:      file_proto_go_service_diversion_diversion_proto_msgTypes,
	}.Build()
	File_proto_go_service_diversion_diversion_proto = out.File
	file_proto_go_service_diversion_diversion_proto_rawDesc = nil
	file_proto_go_service_diversion_diversion_proto_goTypes = nil
	file_proto_go_service_diversion_diversion_proto_depIdxs = nil
}
